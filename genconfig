#!/bin/bash
export CLEAN=0
export IMPORT=0
export OPEN=0
export FILEDIR="files/"
export CONFIGPATH="configs"  
export CUSTCONF="customerconfigs"
export VERBOSE=0
export TMPDIR="/tmp/builder/"
LOCAL_MIRROR="http://10.10.1.31/mirror"

v() {
	[ "$VERBOSE" -ge 1 ] && echo "$@"
}
usage() {
        echo
        echo 1>&2 "Usage:  [OPTION]  $0 BoardConfig Customerconfig"
        echo
	echo "  -c,  remove all files under ./files and import from config "
	echo "  -v,  verbose"
	echo "  -o, use openbroadcom kernel"
	echo "  -u, Update customer config before applying"  
	echo "	-p, set profile (if exists)"
	echo "	-t, use latest git tag and number of commits since as version for the build"
	echo 
        echo "BoardConfig ex "
	ls -1 configs
	if [ -d "$CUSTCONF/$1" ]; then
        echo "Customerconfig ex"
	ls  $CUSTCONF/*
	fi  
	echo
	echo "Example ./genconfig vg50 TELIA" 
        echo "(if no customerconfig is chosen the Inteno Config will be used)"
	echo 	
        exit 127
}

use_local_mirror()
{
    if wget -T 3 -t 2 -O /dev/null $LOCAL_MIRROR >/dev/null 2>/dev/null
    then
	echo "mirror [$LOCAL_MIRROR] exists. Using local mirror"
	sed -i "s;CONFIG_LOCALMIRROR=.*;CONFIG_LOCALMIRROR=\"$LOCAL_MIRROR\";" .config
    else
	echo "mirror [$LOCAL_MIRROR] don't exists. Not using local mirror"
    fi
}

generate_config()
{
    DIFFFILE="$1"
    MASTERFILE="$2"
    while read p; do
	v  "$p"
	sed -r -i  "$p" $MASTERFILE
    done < $DIFFFILE
}

set_profile(){
	local PROFILE="$1"; 
	local MASTERFILE="$2"; 
	echo "setting profile: $PROFILE"; 
	cat "$PROFILE" >> "$MASTERFILE"
	make defconfig > /dev/null
}

create_and_copy_files()
{
    local BOARDTYPE=$1
    local CUSTOMER=$2
    v "cp  $CONFIGPATH/MASTER/config .config"
    cp  $CONFIGPATH/MASTER/config .config
    if [ $OPEN -eq 0 ]; then
		if [ ! -d "$CUSTCONF" ]; then
			git  clone  git@ihgsp.inteno.se:customerconfigs
		elif [ $IMPORT -eq 1 ]; then
			cd customerconfigs
			v "git pull"
			git pull
			cd ..
		fi
    fi

    if [ ! -d "$CONFIGPATH/$BOARDTYPE" ]; then
		echo "Hardware profile does not exist"
		exit 0
		elif  [ ! -d "$CUSTCONF/$BOARDTYPE/$CUSTOMER/" -a $OPEN -eq 0 ]; then
		echo "Customer profile does not exist"
		exit 0
    fi
    v  "Config $BOARDTYPE selected"
    if [ ! -d "$FILEDIR" ]; then
		mkdir $FILEDIR
		elif  [ -d "$FILEDIR" -a $CLEAN -eq 1 ]; then
		v "rm -rf $FILEDIR*"	
		rm -rf $FILEDIR*
    fi
    # first build config based on boardid
    v "cp -rp $CONFIGPATH/$BOARDTYPE/fs/* $FILEDIR"
    cp -rLp $CONFIGPATH/$BOARDTYPE/fs/* $FILEDIR 2>/dev/null
    v "cp -rp $CONFIGPATH/$BOARDTYPE/* $FILEDIR"
    [ -e "$CONFIGPATH/$BOARDTYPE/$BOARDTYPE.diff" ] && generate_config $CONFIGPATH/$BOARDTYPE/$BOARDTYPE.diff .config
    echo $BOARDTYPE > .current_config_file

	# second add diff for customer config if if customer code
	if [ -n "$CUSTOMER" ]; then
		v "cp -r $CUSTCONF/$BOARDTYPE/$CUSTOMER/fs/* $FILEDIR"
		cp -rL $CUSTCONF/$BOARDTYPE/$CUSTOMER/fs/* $FILEDIR
		echo "$BOARDTYPE $CUSTOMER" > .current_config_file
		[ -e "$CUSTCONF/$BOARDTYPE/$CUSTOMER/$BOARDTYPE.diff" ] && generate_config $CUSTCONF/$BOARDTYPE/$CUSTOMER/$BOARDTYPE.diff .config
	fi

	if [ -n "$PROFILE" ]; then 
		if [ -e "$CUSTCONF/$BOARDTYPE/$CUSTOMER/$PROFILE.profile" ]; then
			set_profile $CUSTCONF/$BOARDTYPE/$CUSTOMER/$PROFILE.profile .config
		elif [ -e "$CUSTCONF/$BOARDTYPE/$PROFILE.profile" ]; then 
			v "Using generic board profile for $PROFILE"
			set_profile $CUSTCONF/$BOARDTYPE/$PROFILE.profile .config
		elif [ -e "$CUSTCONF/$PROFILE.profile" ]; then 
			v "Using generic profile for $PROFILE"
			set_profile $CUSTCONF/$PROFILE.profile .config
		else 
			echo "ERROR: profile $PROFILE does not exist!"
			exit 1
		fi
	else 
		v "No profile selected! Using default."
	fi	

	if [ -n "$USE_TAG" ]; then 
		local GIT_TAG=$(git describe --abbrev=0 --tags)
		local GIT_REVISION=$(($(git rev-list --count HEAD) - $(git rev-list --count $GIT_TAG)))
		echo "CONFIG_TARGET_VERSION=\"${GIT_TAG}.${GIT_REVISION}\"" >> .config
		echo "Set version to \"${GIT_TAG}.${GIT_REVISION}\""
	fi	


    ##### if open change to open kernel and remove building of nand tool
    if [ $OPEN -eq 1 ]; then
		[ -e "$CONFIGPATH/OPEN/open.diff" ] && generate_config $CONFIGPATH/OPEN/open.diff .config
    fi
    
    # validate the .config against dependency rules.
    make defconfig
}

####### main #####
if [ $# -eq 0 ]; then
    echo Current profile:
    cat .current_config_file
    echo "Try ./iop_get_config.sh -h' to get instructions if you want to change current config"
    exit 0
else
    
    while [ -n "$1" ]; do 
	case "$1" in

	    -c) export CLEAN=1;;
	    -u) export IMPORT=1;;
	    -o) export OPEN=1;;
	    -v) export VERBOSE="$(($VERBOSE + 1))";;
		-p) export PROFILE="$2"; shift;; 
		-t) export USE_TAG=1;; 
	    -h) usage;;
	    -*)
		echo "Invalid option: $1 "
		echo "Try  -h' for more information."
		exit 1
		;;
	    *) break;;
	esac
	shift;
    done
    [ -d $TMPDIR ] || mkdir $TMPDIR
    create_and_copy_files "$1" "$2"
    [ -d $TMPDIR ] && rm -rf $TMPDIR
    use_local_mirror
fi
