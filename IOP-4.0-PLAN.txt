Plan for moving to IOP-4.0 
=========================

	Written by: Martin Schr√∂der <martin.schroder@inteno.se>

This plan is a compilation of ideas for moving away from current setup in iop-3.5 and following a more OpenWRT compatible setup for iop-4.0. 

Key goals with iop-4.0 
----------------------

- to more closely follow openwrt repository to allow easy and <continuous> integration of upstream changes. 
- to allow iopsys to be a dropin replacement for openwrt: it should be OpenWRT AND something more instead of something more and everything else broken. 
- to separate out iopsys packages so that they can be easily moved to a new version of iopsys (in fact they will not even need to be moved when they are a separate feed - only iopsys base will be replaced)
- to simplify the configuration system: to remove genconfig completely and replace it with combination of ./scripts/env and subtargets
- The basic idea is that iopsys should be to openwrt what ubuntu is to debian - a stable base and a lot more. Customers should not even need to care where it is BB or CC underneath - just that it's iopsys 4.0 that can replace openwrt on any device that openwrt already supports. 
- should be based on openwrt trunk with separate iopsys repos for BB, CC etc - just like openwrt. This makes sure that iopsys always supports latest openwrt stuff - but it is only stable versions of iopsys that work on iopsys boxes. 

Most notable changes to current setup
-------------------------------------

- package/inteno will be moved to their own feed and added to feeds.conf (we can also have multiple branches of this feed for each major iop release) 
	- use git subtree split to keep all the history that we have on that folder
	- then push it into a separate repo and add the feed to feeds.conf
- package/zeta/customers will be cleaned up from all config changes and all the stuff in fs/* will be moved to ./env/ git repo
- genconfig\* will be removed and replaced with ./scripts/env switch <customer-profile> 
- iop_get_feeds.sh is unnecessary - use ./scripts/feeds update -a && ./scripts/feeds install -a instead (get all packages to correctly fill in all dependencies!)

New workflow
------------

Starting from a fresh checkout: 

- ./scripts/feeds update -a && ./scripts/feeds install -a
- inteno-bootstrap.sh
	- will clone inteno-env repo to ./env/ 
	- will go through all branches in remote repo and check them out to create a full list of local branches that can be seen with ./scripts/env list
- ./scripts/env switch <customer>
	- this automatically will manage the customer .config so no need to mess with it!
- make 

Making changes to customer configuraiton: 

- when handled through ./scripts/env, the config can be edited using only make menuconfig and then doing ./scripts/env save -m "message" 
- ./scripts/env save -m "message" && (cd env; git push --all)
- pulling customer configs done with (cd env; git fetch --all ... git rebase or another method of choice)
- env repo is NOT the same as current customer configs!
	- in env repo all customer configs are branches of the same git tree instead of being in separate folders
	- this allows easily to "base" (or rebase) one branch on another and generally just do anything git can do with the whole database of configs
	- less work to do and much better done through git than by using sed on .config!

Integrating upstream changes from openwrt

- add upstream openwrt git repo: git remote add upstream git://git.openwrt.org/openwrt.git
- make sure that all your changes are pushed to inteno repo: git commit .. git push --all
- reset master to upstream: git checkout master && git reset --hard upstream/master
- rebase upstream on inteno: git rebase origin/master
- push inteno master: git push origin master 

Note that if the push fails then you are doing something wrong. Never use --force when you do this! It will break things for everyone else. 

Good things to do
-----------------

- follow openwrt directory structure - this makes it easy to rebase upstream on local and always be in sync. 
- never push huge commits that modify hundreds of files
- patches are good for small changes:
	- go to build_dir/target/package.. make your changes there.
	- commit changes locally: git commit -a -m "some message"
	- create a patch: git format-patch master --stdout > 100-my-patch-for-package
	- move the patch to patches/ folder of the package in your feed. 
- full forks are good if you make a lot of changes to a package and are willing to maintain that package
	- simply swap out git url and update package version hash
- keep number of extra commits to main repo minimal: make most of your changes in the inteno feed
	- makes it easy to rebase to a different openwrt version later. 

Inteno targets
--------------

- All inteno boards should be added as subtargets to brcm63xx target. 
- Best case scenario: it is possible to build inteno firmware and run it based completely on what is already in openwrt. 
- Easy to push these profiles to openwrt because they are just profiles - any inteno specific packages are selected through menuconfig and managed through env
- the distinction between "OPEN" and "BROADCOM" firmare is that a customer using BRCM acceleration would have a config that selects broadcom kernel with all acceleration in place instead of the generic kernel which only supports basic stuff. 
- For any other target we simply do not select inteno packages that depend on broadcom stuff. 
