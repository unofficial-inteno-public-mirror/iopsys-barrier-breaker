This is the buildsystem for the OpenWrt Linux distribution.

Please use "make menuconfig" to configure your appreciated
configuration for the toolchain and firmware.

You need to have installed gcc, binutils, patch, bzip2, flex,
make, gettext, pkg-config, unzip, libz-dev and libc headers.

Run "./scripts/feeds update" to get the latest package definitions
defined in feeds.conf / feeds.conf.default respectively
and "./scripts/feeds install" to install symlinks into "package/feeds/*".

Use "make menuconfig" to configure your image.

Simply running "make" will build your firmware.
It will download all sources, build the cross-compile toolchain, 
the kernel and all choosen applications.

You can use "scripts/flashing/flash.sh" for remotely updating your embedded
system via tftp.

The OpenWrt system is documented in docs/. You will need a LaTeX distribution
and the tex4ht package to build the documentation. Type "make -C docs/" to build it.

To build your own firmware you need to have access to a Linux, BSD or MacOSX system
(case-sensitive filesystem required). Cygwin will not be supported because of
the lack of case sensitiveness in the file system.


Sunshine!
	Your OpenWrt Project
	http://openwrt.org



---------------------------------

Iopsys instructions


Start by running ./scripts/iop_bootstrap.sh.

This downloads all feed repositories and installs the packages from those repositories. feeds.conf has been modified to point to a commit hash for each feed and each package makefile points to a distinct commit. This gives us two improvements. Fist, running ./scripts/feeds update will not update the feeds without the user being explicitly aware of the change. Second, we always build in a deterministic manner and can always recreate the build at a later date. 

To make this workable, a utility script has been developed. When you have created a new commit in the package repo in the build directory this commit needs to be pushed to two places. First the package makefile in the feed needs to be repointed to the new commit. This in turn creates a new commit in the feed and feeds.conf needs to be repointed to that commit.

First you need to set the EDITOR environmental variable to your favorite editor.

Then run ./scripts/update_package.sh

This script will check if any git repo in the build differs from the commit in the package makefile. If it finds a diff it asks to update the package makefile and autogenerates a commit message from the commits between the old and the new commit point. The same then happens for the commit on feeds.conf. 

To prevent an invalid state, the script pushes the new commits to the remote repos. The script needs to know what branches to push to. For that reason, always make sure to check out remote tracking branches, for example with git checkout -t origin/mybranch.

