#!/bin/sh 

# Author: Martin K. Schr√∂der <mkschreder.uk@gmail.com>

# The new genconfig script works by copying all base system options from the master
# config and then using the builtin menuconfig Makefiles to setup all dependencies. 
# This means that in order to get a package built only one specific system and not for the 
# others, you need to make sure that the package is not already selected in the master config
# Any other packages that you want to select for a specific model/customer you should set
# in the model and customer makefiles as package dependencies to the given model/customer package

CONFIG=.config
export CLEAN=0
export IMPORT=0
export OPEN=0
export CONFIGPATH="package/zeta/basefiles/routermodel"
export CUSTCONF="package/zeta/customers"
export VERBOSE=0
LOCAL_MIRROR="http://10.10.1.31/mirror"

#set -e 

echo "$0 $1 $2 $3 $4" > genconfig.last 

usage() {
	echo
	echo 1>&2 "Usage:  [OPTION]  $0 BoardConfig Customerconfig"
	echo
	echo "  -c,  remove all files under ./files and import from config "
	echo "  -v,  verbose"
	echo "  -o, use openbroadcom kernel"
	echo "  -u, Update customer config before applying"  
	echo 
	echo "Available board models: "
	ls -1 ${CONFIGPATH}
	if [ -d "$CUSTCONF/$1" ]; then
		echo "Available customers: "
	ls  $CUSTCONF/*
	fi  
	echo
	echo "Example ./genconfig vg50 TELIA" 
		echo "(if no customerconfig is chosen the Inteno Config will be used)"
	echo 	
		exit 127
}


while [ -n "$1" ]; do 
	case "$1" in
		-c) 
			export CLEAN=1
		;;
		-u) export IMPORT=1;;
		-o) export OPEN=1;;
		-v) export VERBOSE="$(($VERBOSE + 1))";;
		-h) usage;;
		-*)
			echo "Invalid option: $1 "
			echo "Try  -h' for more information."
		  exit 1
		;;
		*) break;;
	esac
	shift;
done

use_local_mirror()
{
    if wget -T 3 -t 2 -O /dev/null $LOCAL_MIRROR >/dev/null 2>/dev/null
    then
	echo "mirror [$LOCAL_MIRROR] exists. Using local mirror"
	sed -i "s;CONFIG_LOCALMIRROR=.*;CONFIG_LOCALMIRROR=$LOCAL_MIRROR;" ${CONFIG}
    else
	echo "mirror [$LOCAL_MIRROR] don't exists. Not using local mirror"
    fi
}

update_customer_configs() 
{
	if [ "${CUSTOMER}" == "open" ] ; then return; fi
	if [ ! -d "$CUSTCONF" ]; then
		git  clone  -b martin git@ihgsp.inteno.se:customerconfigs ${CUSTCONF}
	elif [ "$IMPORT" == "1" ]; then
		(cd ${CUSTCONF}; git pull origin martin)
		# delete empty folders in customer configs because they can appear as customer profiles that are invalid
		for dir in `find package/zeta/customers -maxdepth 1 -type d`; do if [ `find $dir -type f | wc -l` == 0 ]; then echo "REMOVING empty folder: $dir"; rm -rf $dir; fi; done
	fi
}

create_and_copy_files()
{
	local BOARD_DIR="${CONFIGPATH}/${BOARDTYPE}"
	local CUST_DIR="$CUSTCONF/$CUSTOMER-$BOARDTYPE"
	
	if [ ! -d "$CUST_DIR" ]; then 
		echo "Specified board/profile combination does not exist!"; 
		exit -1
	fi 

	local GITVERSION=$(git rev-parse --abbrev-ref HEAD)
	# master and devel get special treatment. Master is always the superstable and devel is the intermediate releases. 
	# but if you build from your own branch then you should use the branch name which you have built
	if [ "$GITVERSION" = "master" -o "$GITVERSION" = "devel" ]; then GITVERSION=$(git describe --tags --abbrev=0); fi
	GITVERSION=${GITVERSION^^}

	echo "Selecting board ${BOARDTYPE} for customer ${CUSTOMER} and building version $GITVERSION"
	cp config.master ${CONFIG}
	echo "CONFIG_PACKAGE_routermodel-${BOARDTYPE,,}=y" >> ${CONFIG}
	echo "CONFIG_PACKAGE_profile-${CUSTOMER,,}=y" >> ${CONFIG}
	echo "CONFIG_PACKAGE_profile-${CUSTOMER,,}-${BOARDTYPE,,}=y" >> ${CONFIG}
	#echo "CONFIG_PACKAGE_customer-${BOARDTYPE,,}=y" >> ${CONFIG}
	#echo "CONFIG_TARGET_MODEL_NAME=\"${BOARDTYPE^^}-WU7P2U\"" >> ${CONFIG}
	echo "CONFIG_TARGET_VERSION=\"${GITVERSION^^}\"" >> ${CONFIG}
	#echo "CONFIG_TARGET_IBOARDID=\"${BOARDTYPE^^}\"" >> ${CONFIG}
	echo "CONFIG_TARGET_CUSTOMER=\"${CUSTOMER^^}\"" >> ${CONFIG}
	
	if [ ! -d "${BOARD_DIR}" ]; then
		echo "Could not find ${BOARDDIR}..."
		exit 
	fi 

	if [ -f "${BOARD_DIR}/config" ]; then	
		cat "${BOARD_DIR}/config" >> ${CONFIG}
	fi

	echo "Updating .config dependencies..."
	make defconfig 1>/dev/null
	
	# apply customer specific patch for the config
	if [ -d "${CUST_DIR}" ]; then
		CONFIGPATCH="${CUST_DIR}/config.force"
		if [ -f "${CONFIGPATCH}" ]; then 
			for line in `cat ${CONFIGPATCH}`; do
				if [[ "$line" == "-"* ]]; then
					OPTION=${line#-}
					sed -i "s/^${OPTION}.*/# ${OPTION} is not set/g" ${CONFIG}
				elif [[ "$line" == "+"* ]]; then
					OPTION=${line#+}
					sed -i "s/.*${OPTION}.*/${OPTION}=y/g" ${CONFIG}
				fi
			done
		fi
	else
		echo "WARNING: could not find ${CUST_DIR}...";
	fi
	
	# new: moving to the new env system
	# [ -d "$BOARD_DIR/fs" ] && [ -n "$(ls -A $BOARD_DIR/fs)" ] && cp -Rp "$BOARD_DIR/fs/*" ./files
	# [ -d "$BOARD_DIR/fs" ] && [ -n "$(ls -A $CUST_DIR/fs)" ] && cp -Rp "$CUST_DIR/fs/*" ./files

	# for now we do not use the new configs, just update them so we can switch to them later
	#echo "your customer configs have been copied to branch $CUSTOMERBRANCH in env"
	#echo "EDIT YOUR CONFIG USING MENUCONFIG!"
	#echo "AND PLACE ALL CUSTOMER FILES IN ./files FOLLOWED BY A COMMIT TO ENV!"
	#echo "USE ./scripts/env switch TO SWITCH ENV"
	#echo "USE ./scripts/env save TO SAVE ENV"

	# remove any references to luci and lua
	# sed -i 's/.*luci.*//gi' ${CONFIG}
	# sed -i 's/.*lua.*//gi' ${CONFIG}
	
##### if open change to open kernel and remove building of nand tool
#if [ $OPEN -eq 1 ]; then
#  [ -e "$CONFIGPATH/OPEN/open.diff" ] && generate_config $CONFIGPATH/OPEN/open.diff .config
#fi
}

# must do this here after we have parsed all the arguments
export BOARDTYPE="$1"
export CUSTOMER="$2"

if [ "$CUSTOMER" == "" ]; then CUSTOMER="field"; fi
if [ "$CUSTOMER" == "open" ]; then OPEN=1; fi

# get rid of the stupid files folder that will mess up our brand new build
# (I haz deleted your files, but don't worry, you shall thank me later!..)
rm -rf ./files
rm -rf .config

# auto update of env has been disabled

# and replace it with inteno env! 
#if [ ! -d env ]; then 
	#git clone git@iopsys.inteno.se:inteno-env.git env 
	#(cd env; for remote in $(git branch -r | awk '{print $1}'); do git branch --track $remote; done)
#fi 

#(cd env; git fetch --all; for branch in `git branch -r | grep -v HEAD`; do git checkout -b $(basename $branch) $branch; done)

CUSTOMERBRANCH="$BOARDTYPE-$CUSTOMER"
#if [ "$(cd env; git branch --list $CUSTOMERBRANCH)" ]; then 
	#yes | ./scripts/env switch $CUSTOMERBRANCH
#	echo "Switched to branch $CUSTOMERBRANCH in customer env"
	#echo "DO NOT USE OLD package/zeta/customers ANYMORE! This customer config is now in ENV!"
	#exit 0
#else 
#	echo "creating new env $CUSTOMERBRANCH"
	#yes | ./scripts/env new $CUSTOMERBRANCH
#fi


echo "Using boardtype: $BOARDTYPE"
if [ -z "$BOARDTYPE" ]; then
	usage
else
	if [ $OPEN -eq 0 ]; then
		update_customer_configs
		(cd ${CUSTCONF}; bash ./update-makefiles.sh)
	fi
	(cd ${CONFIGPATH}; bash ./update-makefiles.sh)
	create_and_copy_files "$1" "$2"
	cat $CONFIG | grep -v "^$" | sort > $CONFIG.new; mv $CONFIG.new $CONFIG 
	#yes | ./scripts/env save "genconfig_new update"
	#(cd env; git push --all)
	# do not use local mirror because this doesn't work right now (it toggles between local and nonlocal each time)
	#use_local_mirror
fi


