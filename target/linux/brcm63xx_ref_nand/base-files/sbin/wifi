#!/bin/sh
ENABLE_HOOKS=
DISABLE_HOOKS=

. /lib/brcmaliases.sh
. /lib/functions.sh
. /usr/share/libubox/jshn.sh
. /lib/network/ebtables.sh
[ -f /lib/network/anyfi.sh ] && . /lib/network/anyfi.sh
[ -f /lib/network/anyfi_broadcom.sh ] && . /lib/network/anyfi_broadcom.sh

exec >/dev/null 2>&1

local _enWifi=0
local _enWps=0
local _vno=0
local _cno=0
local acsifs=""
local staifs=""
local wetifs=""

cleanup() {
	# remove all QR code images
	rm -f /www/luci-static/resources/icons/wqr_$1*

	# clean NVRAM parameters and set debug mode
	sed -i "/option $1/ d" /etc/config/broadcom
	sed -i "s/$1//g" /etc/config/broadcom
	nvram set init=1
	nvram set debug=0
}

kill_related_daemons() {
	killall -9 eapd 2>/dev/null
	killall -9 nas 2>/dev/null
	killall -9 acsd 2>/dev/null
	killall -9 wps_monitor 2>/dev/null
	rm -f /tmp/wps_monitor.pid
}

start_related_daemons() {
	[ -n "$acsifs" ] && acsd
	eapd
	nas
	[ $_enWps -gt 0 ] && wps_monitor &
}

set_bridge() {
	local br=$1
	brctl stp $br off
	brctl setfd $br 0
	sendarp -s $br -d $br
}

map_networks() {
	# map all interfaces to corresponding networks by nvram parameters
	local ifdev ifobj devtype
	local devs=""
	local _acnt=0
	for ifobj in `ubus list network.interface.\*`; do
		interface="${ifobj##network.interface.}"
		(
			[ "$_acnt" == "0" ] && _acnt=""
			[ "$interface" == "loopback" ] && continue
			json_load "$(ifstatus $interface)"
			json_get_var ifdev device
			if [ -n "$ifdev" ]; then
				nvram set lan"$_acnt"_ifname="$ifdev"
				json_load "$(devstatus $ifdev)"
				json_get_var devtype type
				if [ "$devtype" == "Bridge" ]; then
					local _i=1
					set_bridge $ifdev
					json_select bridge-members
					while json_get_var dev $_i; do
						[ -z "$devs" ] && devs="$dev" || devs="$devs $dev"
						_i=$((_i+1))
					done
					nvram set lan"$_acnt"_ifnames="$devs"
				else
					nvram set lan"$_acnt"_ifnames="$ifdev"
				fi
			fi
		)
		_acnt=$((_acnt+1))
	done
}

netno() {
	local network="$1"
	local ifobj
	local _acnt=0
	for ifobj in `ubus list network.interface.\*`; do
		interface="${ifobj##network.interface.}"
		(
			[ "$_acnt" == "0" ] && _acnt=""
			[ "$interface" == "loopback" ] && continue
			if [ "$interface" == "$network" ]; then
				echo "$_acnt"
				break
			fi
		)
		_acnt=$((_acnt+1))
	done
}

find_network() {
	local device="$1"
	local ifdev ifl3dev ifobj devtype
	for ifobj in `ubus list network.interface.\*`; do
		interface="${ifobj##network.interface.}"
		[ "$interface" == "loopback" ] && continue
		json_load "$(ifstatus $interface)"
		json_get_var ifdev device
		json_get_var ifl3dev l3_device
		if [ "$device" == "$ifdev" -o "$device" == "$ifl3dev" ]; then
			echo "$interface"
			return
		else
			json_load "$(devstatus $ifdev)"
			json_get_var devtype type
			if [ "$devtype" == "Bridge" ]; then
				local _i=1
				json_select bridge-members
				while json_get_var dev $_i; do
					if [ "$dev" == "$device" ]; then
						echo "$interface"
						return
					fi
					_i=$((_i+1))
				done
			fi
		fi
	done
}

create_qr_code() {
	local wifc=$1
	local wssd=$2
	local wenc=$3
	local wkey=$4
	local whid=$5
	qrencode -o /www/luci-static/resources/icons/wqr_$wifc.png "WIFI:T:$wenc;S:$wssd;P:$wkey;H:$whid;"
}

set_wifi_down() {
	local device="$1"
	local iface
	local network
	[ -n "$2" -a "$device" != "$2" ] && continue
	uci_revert_state wireless "$device"
	wlctl -i $device down
	for iface in $(grep "$device" /proc/net/dev | awk -F':' '{print$1}'); do
		# remove ebtables wme rules
		remove_ebtables_wme_rules $iface
		network="$(find_network $iface)"
		wlctl -i "$iface" bss down
		wlctl -i "$iface" ssid ""
		ifconfig "$iface" down >/dev/null 2>&1 && {
			[ -n "$network" ] && ubus call network.interface."$network" remove_device "{ \"name\": \"$iface\" }" 2>/dev/null && uci_revert_state wireless "$iface"
		}
	done
	ledctl wireless off
}

wireless_mode() {
	local mode="$1"
	local network="$2"
	local bridged="0"
	local wmode="ap"
	[ "$(uci get network.$network.type)" == "bridge" ] && bridged="1"
	case "$mode" in
		ap) wmode="ap" ;;
		sta) [ "$bridged" == "1" ] && wmode="wet" || wmode="sta" ;;
	esac
	echo $wmode
}

wif_encryption_settings() {
	local vif=$1
	local iface=$2
	local nif=${iface/./_}
	local qr_enc="nopass"
	local qr_hidden=false
	local qr_key="no"
	local key=
	local wsec=0
	local wsec_r=0
	local eap=0
	local eap_r=0
	local auth=0
	config_get ssid "$vif" ssid
	config_get_bool hidden "$vif" hidden "0"
	config_get enc "$vif" encryption
	config_get cipher "$vif" cipher

	wlctl -i $iface closed $hidden
	[ "$hidden" == "1" ] && qr_hidden=true

	wlctl -i $iface auth 0
	nvram set "$nif"_auth=0
	nvram set "$nif"_preauth=0
	nvram set "$nif"_net_auth_type=1
	nvram set "$nif"_wep=disabled
	case "$enc" in
		*wep*)
			wsec_r=1
			wsec=1
			nvram set "$nif"_wep=enabled
			config_get key "$vif" key
			case "$enc" in
				*shared*) wlctl -i $iface auth 1; nvram set "$nif"_auth=1;;
			esac
			case "$key" in
				[1234])
					for knr in 1 2 3 4; do
						echo "wlctl -i $iface rmwep $((knr-1))" >> /tmp/wepset
						config_get k "$vif" key$knr
						[ "$knr" == "$key" ] && qr_key="$k"
						[ -n "$k" ] || continue
						echo "wlctl -i $iface addwep $((knr-1)) $k" >> /tmp/wepset
					done
					echo "wlctl -i $iface primary_key $((key-1))" >> /tmp/wepset
				;;
				*)
					if [ -n "$key" ]; then
						echo "wlctl -i $iface rmwep 0" >> /tmp/wepset
						echo "wlctl -i $iface addwep 0 $key" >> /tmp/wepset
						echo "wlctl -i $iface primary_key 0" >> /tmp/wepset
						qr_key="$key"
					fi
				;;
			esac
			qr_enc="WEP"
		;;
		*psk*)
			wsec_r=1
			eap=1
			eap_r=1
			config_get key "$vif" key
			config_get gtk "$vif" gtk_rekey "0"
			nvram set "$nif"_wpa_gtk_rekey=$gtk
			# psk version + default cipher
			case "$enc" in
				*mixed*|*psk+psk2*) auth=132; wsec=6; nvram set "$nif"_akm='psk psk2'; nvram set "$nif"_crypto=tkip+aes;;
				*psk2*) auth=128; wsec=4; nvram set "$nif"_akm=psk2; nvram set "$nif"_crypto=aes;;
				*) auth=4; wsec=2; nvram set "$nif"_akm=psk; nvram set "$nif"_crypto=tkip;;
			esac
			# cipher override
			case "$cipher" in
				*tkip+aes*|*tkip+ccmp*|*aes+tkip*|*ccmp+tkip*) wsec=6; nvram set "$nif"_crypto=tkip+aes;;
				*aes*|*ccmp*) wsec=4; nvram set "$nif"_crypto=aes;;
				*tkip*) wsec=2; nvram set "$nif"_crypto=tkip;;
			esac
			nvram set "$nif"_wpa_psk="$key"
			nvram set "$nif"_auth_mode="psk"
			qr_enc="WPA"
			qr_key="$key"
		;;
		*wpa*)
			wsec_r=1
			eap=1
			eap_r=1
			config_get key "$vif" key
			#config_get server "$vif" server
			#config_get port "$vif" port
			config_get rad_serv "$vif" radius_server
			config_get rad_port "$vif" radius_port "1812"
			config_get rad_sec "$vif" radius_secret
			config_get net_reauth "$vif" key net_reauth "36000"
			nvram set "$nif"_net_reauth="$net_reauth"
			# wpa version + default cipher
			case "$enc" in
				*mixed*|*wpa+wpa2*) auth=66; wsec=6; nvram set "$nif"_akm='wpa wpa2'; nvram set "$nif"_crypto=tkip+aes;;
				*wpa2*) auth=64; wsec=4; nvram set "$nif"_akm=wpa2; nvram set "$nif"_crypto=aes;;
				*) auth=2; wsec=2; nvram set "$nif"_akm=wpa; nvram set "$nif"_crypto=tkip;;
			esac
			# cipher override
			case "$cipher" in
				*tkip+aes*|*tkip+ccmp*|*aes+tkip*|*ccmp+tkip*) wsec=6; nvram set "$nif"_crypto=tkip+aes;;
				*aes*|*ccmp*) wsec=4; nvram set "$nif"_crypto=aes;;
				*tkip*) wsec=2; nvram set "$nif"_crypto=tkip;;
			esac
			nvram set "$nif"_wpa_psk="$key"
			nvram set "$nif"_auth_mode="radius"
			nvram set "$nif"_radius_ipaddr="$rad_serv"
			nvram set "$nif"_radius_port="$rad_port"
			nvram set "$nif"_radius_key="$rad_sec"
			qr_enc="WPA"
			qr_key="$key"
		;;
	esac
	case "$wmode" in
		sta|wet) nvram set "$nif"_auth_mode="none" ;;
	esac
	wlctl -i $iface wsec $wsec
	wlctl -i $iface wpa_auth $auth
	wlctl -i $iface wsec_restrict $wsec_r
	wlctl -i $iface eap $eap
	wlctl -i $iface eap_restrict $eap_r

	# create QR code of the Wi-Fi network
	create_qr_code "$iface" "$ssid" "$qr_enc" "$qr_key" "$qr_hidden"
}

wif_general_settings() {
	local vif=$1
	local iface=$2
	local nif=${iface/./_}
	local wmode
	config_get mode "$vif" mode "ap"
	config_get ssid "$vif" ssid
	config_get network "$vif" network
	config_get bss_max "$vif" bss_max "16"
	config_get_bool isolate "$vif" isolate "0"

	wlctl -i $iface ssid "$ssid"
	nvram set "$nif"_ifname="$iface"
	nvram set "$nif"_ssid="${ssid:-Inteno}"

	# set Mode
	wmode="$(wireless_mode $mode $network)"
	nvram set "$nif"_mode="$wmode"
	[ "$wmode" == "sta" ] && staifs="$staifs $iface"
	[ "$wmode" == "wet" ] && wetifs="$wetifs $iface"

	# set Radio Infra
	nvram set "$nif"_radio=1
	nvram set "$nif"_infra=1

	wlctl -i $iface bss_maxassoc $bss_max
	wlctl -i $iface ap_isolate $isolate
	wlctl -i $iface vlan_mode 0
}

wif_apsta_settings() {
	local vif=$1
	local iface=$2
	local nif=${iface/./_}
	local device
	local apsta

	config_get device "$vif" device
	config_get mode "$vif" mode
	config_get_bool autoconf "$vif" autoconf
	config_get apsta "$device" apsta

	# tag apsta interfaces
	if [ "$apsta" == "1" ]; then
		if [ "$mode" == "sta" ]; then
			# tag sta interface
			nvram set wl_apsta_sta_ifname="$iface"
			nvram set wl_apsta_sta_cfg="$vif"
			nvram set wl_apsta_sta_net="$network"
#		else
#			# tag ap interface
#			nvram set wl_apsta_ap_ifname="$iface"
#			nvram set wl_apsta_ap_cfg="$vif"
#			nvram set wl_apsta_ap_net="$network"
		fi
	fi

	# tag autoconf interfaces
	if [ "$mode" == "ap" -a "$autoconf" == "1" ]; then
		nvram set wl_autoconf_ap_ifnames="$iface $(nvram get wl_autoconf_ap_ifnames)"
		nvram set wl_autoconf_ap_cfgs="$vif $(nvram get wl_autoconf_ap_cfgs)"
		nvram set wl_autoconf_ap_net="$network"
	fi
}

wif_wps_settings() {
	local vif=$1
	local iface=$2
	local nif=${iface/./_}
	local device
	local lno
	config_get device "$vif" device
	config_get mode "$vif" mode
	config_get wps_mode "$vif" wps_pbc

	if [ "$wps_mode" == "1" ]; then
		nvram set "$nif"_wps_mode="enabled"
		nvram set router_disable="0"
		nvram set wps_modelnum="123456"
		nvram set boardnum="1234"
		nvram set wps_modelname="Broadcom"
		nvram set wps_mfstring="Broadcom"
		nvram set wps_device_name="$(uci -q get wireless.@wifi-iface[0].ssid)"
		nvram set wps_version2="enabled"
		lno=$(netno $network)
		nvram set lan"$lno"_wps_reg="enabled"
		nvram set lan"$lno"_wps_oob="disabled"
		nvram set wps_proc_status="0"
		nvram set wps_button_gpio=`db get -q hw.board.wpsButtonGpio`
		if [ "$(uci -q get wireless.$device.apsta)" == "1" ]; then
			nvram set "$device"_ure_mode="wre"
			nvram set wps_pbc_apsta="enabled"
			nvram set wps_pbc_method="2"
			[ "$mode" == "sta" ] && nvram set wps_pbc_sta_ifname="$iface" || nvram set wps_pbc_ap_ifname="$iface"
		fi
		nvram set wps_config="DONE"
		_enWps=$((_enWps+1))
	else
		nvram set "$nif"_wps_mode="disabled"
	fi
}

wif_macfilter() {
	local vif=$1
	local iface=$2
	local nif=${iface/./_}
	config_get macfilter "$vif" macfilter "0"
	config_get maclist "$vif" maclist

	wlctl -i $iface macmode $macfilter
	wlctl -i $iface mac none
	[ -n "$maclist" ] && {
		for mac in $maclist; do
			wlctl -i $iface mac $mac
		done
	}
}

wif_wmx_settings() {
	local vif=$1
	local iface=$2
	local nif=${iface/./_}
	config_get_bool wmf_bss_enable "$vif" wmf_bss_enable "1"
	config_get_bool wmm_bss_disable "$vif" wmm_bss_disable "0"

	# set WMF
	wlctl -i $iface wmf_bss_enable $wmf_bss_enable || dhdctl -i $iface wmf_bss_enable $wmf_bss_enable
	# set WME
	wlctl -i $iface wme_bss_disable $wmm_bss_disable
}

wif_setup() {
	local vif=$1
	local iface=$2
	local nif=${iface/./_}
	local device
	local vifs
	config_get device "$vif" device
	config_get network "$vif" network
	config_get_bool disabled "$vif" disabled

	# set wireless VIFs in broadcom nvram
	vifs=$(nvram get "$device"_vifs)
	[ -z "$vifs" ] && vifs="$iface" || vifs="$vifs $iface"
	nvram set "$device"_vifs="$vifs"

	# set VIF UCI state
	uci_set_state wireless "$vif" up 1
	uci_set_state wireless "$vif" ifname "$iface"

	# add ebtables rules for VIF
	[ $(wlctl -i $device wme) -eq 1 ] && add_ebtables_wme_rules $iface

	# tag VIF network
	nvram set "$nif"_network=$network

	# check if VIF is disabled in config
	if [ "$disabled" == "1" ]; then
		nvram set "$nif"_bss_enabled=0
	else
		nvram set "$nif"_bss_enabled=1
	fi
}

set_wifi_iface() {
	local vif="$1"
	local device
	local iface
	config_get device "$vif" device

	[ "$2" == "$device" ] || continue

	if [ $_vno -eq 0 ]; then
		iface="$device"
		wlctl -i $device mbss 0
	else
		# multiple SSIDs are used
		iface="$device"."$_vno"
		nvram set nas_alternate=1
		wlctl -i $device mbss 1
	fi

	wif_general_settings $vif $iface
	wif_macfilter $vif $iface
	wif_wmx_settings $vif $iface
	wif_encryption_settings $vif $iface
	wif_apsta_settings $vif $iface
	wif_wps_settings $vif $iface
	wif_setup $vif $iface

	_vno=$((_vno+1))
}

wdev_wif_bringup() {
	local device=$1
	local wif

	# turn on wireless led
	wlctl -i $device leddc 0
	ledctl wireless on

	bring_wif_up() {
		local iface=$1
		local nif=${iface/./_}
		local network=$(nvram get "$nif"_network)

		# toggle wireless virtual interface
		wlctl -i $iface bss down
		wlctl -i $iface bss up

		local perethr=$(wlctl -i $iface perm_etheraddr | awk '{print$2}')
		local curethr=$(wlctl -i $iface cur_etheraddr | awk '{print$2}')
		nvram set "$nif"_hwaddr="$curethr"
		ifconfig $iface hw ether $curethr 2>/dev/null
		ifconfig "$iface" up >/dev/null 2>&1 && {
			[ -n "$network" ] && ubus call network.interface."$network" add_device "{ \"name\": \"$iface\" }" 2>/dev/null
		}

		wlctl -i $iface bss down
		[ $(nvram get "$nif"_bss_enabled) -eq 1 ] && wlctl -i $iface bss up
	}

	# toggle wireless radio
	wlctl -i $device down
	wlctl -i $device up

	# bring virtual interfaces up
	for wif in $(nvram get "$device"_vifs); do
		bring_wif_up $wif
	done
}

create_wif() {
	local vif="$1"
	local device
	local iface
	local network
	config_get device "$vif" device
	config_get network "$vif" network

	[ "$2" == "$device" ] || continue
	wlctl -i $device bss -C $_cno down
	wlctl -i $device ssid -C $_cno ""
	[ $_cno -eq 0 ] && iface="$device" || iface="$device"."$_cno"

	# tag guestMgr interface
	[ "$network" == "guestMgr" ] && {
		nvram set wl_guestmgr_ifname="$iface"
		nvram set wl_guestmgr_cfgno="$vif"
	}

	_cno=$((_cno+1))
}

wdev_static_settings() {
	local device=$1
	wlctl -i $device phy_watchdog 1
	wlctl -i $device stbc_rx 0
	wlctl -i $device stbc_tx -1
	wlctl -i $device fcache 1 || dhdctl -i $device fcache 1
	wlctl -i $device pktc 1 || dhdctl -i $device pktc 1
	wlctl -i $device wnm 0x103
	wlctl -i $device ap 1
	wlctl -i $device wet 0
	wlctl -i $device mpc 0
	wlctl -i $device infra 1
	wlctl -i $device closed 0
	wlctl -i $device mimo_preamble 2
	wlctl -i $device gmode_protection 1
	wlctl -i $device gmode_protection_override -1
	wlctl -i $device gmode_protection_control 2
	wlctl -i $device nmode_protection_override -1
	wlctl -i $device protection_control 2
	wlctl -i $device bg_rate 0
	wlctl -i $device mrate 0
	wlctl -i $device bg_mrate 0
	wlctl -i $device afterburner_override 0
	wlctl -i $device ampdu 1
	wlctl -i $device amsdu 0
	wlctl -i $device rx_amsdu_in_ampdu 0
	wlctl -i $device noise_metric 1
	wlctl -i $device rxchain_pwrsave_stas_assoc_check 1
	wlctl -i $device radio_pwrsave_stas_assoc_check 1
}

wdev_radar_settings() {
	local device=$1
	config_get doth "$device" doth "1"
	case "$doth" in
		1)
			wlctl -i $device radar 1
			wlctl -i $device regulatory 0
			wlctl -i $device spect 1
		;;
		2)
			wlctl -i $device radar 1
			wlctl -i $device regulatory 0
			wlctl -i $device spect 2
		;;
		3)
			wlctl -i $device radar 1
			wlctl -i $device regulatory 1
			wlctl -i $device spect 0
		;;
		*)
			wlctl -i $device radar 0
			wlctl -i $device regulatory 0
			wlctl -i $device spect 0
		;;
	esac
}

wdev_bwcap_settings() {
	local device=$1
	config_get country "$device" country "EU/13"
	config_get band "$device" band "b"
	config_get bandwidth "$device" bandwidth

	wlctl -i $device country $country
	wlctl -i $device band $band
	case "$bandwidth" in
		80)
			wlctl -i $device mimo_bw_cap 2
			wlctl -i $device bw_cap 2g 0x1
			wlctl -i $device bw_cap 5g 0x7
		;;
		40)
			wlctl -i $device mimo_bw_cap 2
			wlctl -i $device bw_cap 2g 0x3
			wlctl -i $device bw_cap 5g 0x3
		;;
		20)
			wlctl -i $device mimo_bw_cap 0
			wlctl -i $device bw_cap 2g 0x1
			wlctl -i $device bw_cap 5g 0x1
		;;
		*)
			wlctl -i $device mimo_bw_cap 0
			wlctl -i $device bw_cap 2g 0x1
			wlctl -i $device bw_cap 5g 0x3
		;;
	esac
}

wdev_hwmode_settings() {
	local device=$1
	config_get hwmode "$device" hwmode "auto"

	wlctl -i $device gmode 1
	wlctl -i $device nmode -1
	wlctl -i $device nreqd 0
	wlctl -i $device vhtmode 0
	case "$hwmode" in
		*a)
			wlctl -i $device nmode 0
		;;
		*b)
			wlctl -i $device nmode 0
			wlctl -i $device gmode 0
		;;
		*bg)
			wlctl -i $device nmode 0
			wlctl -i $device gmode 1
		;;
		*g)
			wlctl -i $device nmode 0
			wlctl -i $device gmode 2
		;;
		*gst)
			wlctl -i $device gmode 4
		;;
		*lrs)
			wlctl -i $device gmode 5
		;;
		*n)
			wlctl -i $device nmode 1
			wlctl -i $device nreqd 1
		;;
		*ac)
			wlctl -i $device nmode 3
			wlctl -i $device nreqd 1
			wlctl -i $device vhtmode 1
		;;
	esac
}

wdev_channel_settings() {
	local device=$1
	config_get channel "$device" channel "auto"
	config_get scantimer "$device" scantimer "15"

	case "$channel" in
		auto)
			acsifs="$(nvram get acs_ifnames | sed 's/ *$//')"
			if [ -n "$acsifs" ]; then
				nvram set acs_ifnames="$acsifs $device"
			else
				nvram set acs_ifnames="$device"
			fi
			nvram set "$device"_acs_chan_dwell_time="70"
			nvram set "$device"_acs_chan_flop_period="70"
			nvram set "$device"_acs_ci_scan_timeout="300"
			nvram set "$device"_acs_ci_scan_timer="4"
			nvram set "$device"_acs_cs_scan_timer=$((scantimer * 60))
			nvram set "$device"_acs_dfs="1"
			nvram set "$device"_acs_dfsr_activity="30 10240"
			nvram set "$device"_acs_dfsr_deferred="604800 5"
			nvram set "$device"_acs_dfsr_immediate="300 3"
			nvram set "$device"_acs_excl_chans=""
			nvram set "$device"_acs_fcs_mode="1"
			nvram set "$device"_acs_scan_entry_expire="3600"
			nvram set "$device"_acs_tx_idle_cnt="5"
			nvram set "$device"_acs_lowband_least_rssi="-75"
			wlctl -i $device chanim_mode 2
		;;
		*)
			wlctl -i $device chanspec $channel
		;;
	esac
}

wdev_rate_settings() {
	local device=$1
	config_get rateset "$device" rateset "default"
	config_get rate "$device" rate "0"

	wlctl -i $device rateset $rateset
	wlctl -i $device rate $rate
}

wdev_rifs_settings() {
	local device=$1
	config_get rifs "$device" rifs "0"
	config_get rifs_advert "$device" rifs_advert "0"

	wlctl -i $device rifs $rifs
	wlctl -i $device rifs_advert $rifs_advert
}

wdev_wme_settings() {
	local device=$1
	config_get wmm "$device" wmm "1"
	config_get wmm_noack "$device" wmm_noack "0"
	config_get wmm_apsd "$device" wmm_apsd "1"

	wlctl -i $device wme $wmm
	wlctl -i $device wme_noack $wmm_noack
	wlctl -i $device wme_apsd $wmm_apsd
}

wdev_tweak_settings() {
	local device=$1
	config_get_bool frameburst "$device" frameburst "0"
	config_get frag "$device" frag "2346"
	config_get rts "$device" rts "2347"
	config_get dtim_period "$device" dtim_period "1"
	config_get beacon_int "$device" beacon_int "100"

	wlctl -i $device rtsthresh $rts
	wlctl -i $device fragthresh $frag
	wlctl -i $device dtim $dtim_period
	wlctl -i $device bi $beacon_int
	wlctl -i $device frameburst $frameburst
}

wdev_antenna_settings() {
	local device=$1
	config_get rxantenna "$device" rxantenna "3"
	config_get txantenna "$device" txantenna "3"

	wlctl -i $device antdiv $rxantenna
	wlctl -i $device txant $txantenna
}

wdev_power_settings() {
	local device=$1
	config_get txpower "$device" txpower "100"
	config_get rxchainps "$device" rxchainps "0"
	config_get rxchainps_qt "$device" rxchainps_qt "10"
	config_get rxchainps_pps "$device" rxchainps_pps "10"

	wlctl -i $device pwr_percent $txpower
	wlctl -i $device rxchain_pwrsave_enable $rxchainps
	wlctl -i $device rxchain_pwrsave_quiet_time $rxchainps_qt
	wlctl -i $device rxchain_pwrsave_pps $rxchainps_pps
}

wdev_wds_settings() {
	local device=$1
	config_get wds "$device" wds

	wlctl -i $device wds none
	wlctl -i $device wdswsec 0
	wlctl -i $device wdswsec_enable 0
}

wdev_assoc_settings() {
	local device=$1
	config_get maxassoc "$device" maxassoc "16"

	wlctl -i $device maxassoc $maxassoc
}

wdev_apsta_settings() {
	local device=$1
	config_get apsta "$device" apsta "0"

	wlctl -i $device apsta $apsta
	nvram set "$device"_apsta=$apsta
}

setup_wifi_device() {
	local device="$1"
	config_get radio "$device" radio "on"

	wlctl -i $device down

	# create wireless virtual interfaces
	config_foreach create_wif wifi-iface "$device"
	_cno=0

	[ "$radio" == "off" ] && continue || _enWifi=$((_enWifi+1))
	[ -n "$2" -a "$device" != "$2" ] && continue

	wdev_static_settings $device
	wdev_radar_settings $device
	wdev_bwcap_settings $device
	wdev_hwmode_settings $device
	wdev_channel_settings $device
	wdev_rate_settings $device
	wdev_rifs_settings $device
	wdev_wme_settings $device
	wdev_tweak_settings $device
	wdev_antenna_settings $device
	wdev_power_settings $device
	wdev_wds_settings $device
	wdev_assoc_settings $device
	wdev_apsta_settings $device

	# configure wireless virtual interfaces
	config_foreach set_wifi_iface wifi-iface "$device"
	_vno=0

	wdev_wif_bringup $device
}

set_processor_id() {
	wlctl -i wl1 ap || wlctl -i wl0 tp_id 1
}

configure_wep() {
	case "$1" in
		init)
			echo "#/bin/sh" > /tmp/wepset
			chmod u+x /tmp/wepset
		;;
		set)
			# set wepkeys if configured
			if [ -f /tmp/wepset ]; then
				sh /tmp/wepset
				rm /tmp/wepset
			fi
		;;
	esac
}

# Run all hook functions $2...$N for each config entry $1
run_hooks() {
	local arg="$1"; shift
	for func in "$@"; do
		config_foreach $func $arg
	done
}

wireless_sta() {
	local dhprc

	for staif in $staifs; do
		dhprc="$(ps | grep udhcpc | grep -w $staif | awk '{print$1}')"
		if [ -n "$dhprc" ]; then
			wlctl -i $staif bss up
			kill -9 $dhprc
		fi
	done

	for wetif in $wetifs; do
		wlctl -i $wetif wet 1
		wlctl -i $wetif bss up
	done
}

wifi_updown() {
	local action="$1"
	local wdev="$2"

	cleanup $wdev
	kill_related_daemons
	set_processor_id

	config_load wireless

	# disable wireless device
	config_foreach set_wifi_down wifi-device $wdev
	run_hooks wifi-device $DISABLE_HOOKS # ANYFI

	[ "$action" == "disable" ] && return

	# enable wireless device
	configure_wep "init"
	config_foreach setup_wifi_device wifi-device $wdev
	configure_wep "set"
	nvram set wlmngr=done

	ledctl eco off
	[ $_enWifi -le 0 ] && ledctl eco on && return

	map_networks
	run_hooks wifi-device $ENABLE_HOOKS # ANYFI
	start_related_daemons
	wireless_sta
}

wifi_reload_legacy() {
	wifi_updown "disable" "$1"
	wifi_updown "enable" "$1"
}

wifi_reload() {
	ubus call network reload
	wifi_reload_legacy
}

wifi_detect() {
	local wls="wl0 wl1"
	local bands band bwidth country hwmode pcid
	local BMAC=$(cat /proc/nvram/BaseMacAddr | tr '[a-z]' '[A-Z]')
	BMAC=${BMAC// /}
	local BSSID=$(printf "%X\n" $((0x$BMAC + 2)))
	local BSSID4=${BSSID:6:4}
	local WPAKEY=$(cat /proc/nvram/WpaKey)
	WPAKEY="${WPAKEY:-1234567890}"

	pcID() {
		wlctl -i $wl revinfo | awk 'FNR == 2 {print}' | cut -d'x' -f2
	}
	is5G() {
		[ "$(db get hw.$1.bands)" == "a" ] && return 0 || return 1
	}
	isAC() {
		[ "$(db get hw.$1.is_ac)" == "1" ] && return 0 || return 1
	}

	for wl in $wls; do
		if wlctl -i $wl ap >/dev/null 2>&1; then
			if ! uci get wireless.$wl >/dev/null 2>&1; then
				pcid=$(pcID $wl)
				country="EU/13"
				hwmode="auto"
				if $(is5G $pcid); then
					band="a"
					bwidth="40"
					$(isAC $pcid) && hwmode="11ac"
				else
					band="b"
					bwidth="20"
				fi
				cat >> /etc/config/wireless <<EOF
config wifi-device '$wl'
	option type 'broadcom'
	option country '$country'
	option band '$band'
	option bandwidth '$bwidth'
	option hwmode '$hwmode'
	option channel 'auto'
	option scantimer '15'
	option wmm '1'
	option wmm_noack '0'
	option wmm_apsd '0'
	option txpower '100'
	option rateset 'default'
	option frag '2346'
	option rts '2347'
	option dtim_period '1'
	option beacon_int '100'
	option rxchainps '0'
	option rxchainps_qt '10'
	option rxchainps_pps '10'
	option rifs '0'
	option rifs_advert '0'
	option maxassoc '16'

config wifi-iface
	option device '$wl'
	option network 'lan'
	option mode 'ap'
	option ssid 'Inteno-$BSSID4'
	option encryption 'mixed-psk'
	option cipher 'auto'
	option key '$WPAKEY'
	option gtk_rekey '0'
	option macfilter '0'
	option wps_pbc '1'
	option wmf_bss_enable '1'
	option bss_max '16'

EOF
			fi
		fi
	done

}

wifi_toggle_iface() {
	[ -z "$2" ] && return
	local wif="$2"
	local wdev="${wif:0:3}"
	local nif=${wif/./_}
	if [ "$1" == "disable" ]; then
		nvram set "$nif"_bss_enabled=0
		wlctl -i $wif bss down
	else
		nvram set "$nif"_bss_enabled=1
		wlctl -i $wif bss up
	fi
}

case "$1" in
	disable|enable) wifi_toggle_iface "$1" "$2" ;;
	detect) wifi_detect ;;
	down) wifi_updown "disable" "$2" ;;
	reload) wifi_reload "$2" ;;
	reload_legacy) wifi_reload_legacy "$2" ;;
	*) ubus call network reload; wifi_updown "enable" "$2";;
esac

