#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh
. /lib/functions/network.sh


set_classless_routes() {
	local max=128
	local type
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2"
		max=$(($max-1))
		shift 2
	done
}



# function: change_to_vlan
# arg 1 = vlan id
# arg 2 = vlan priority
# arg 3 = $INTERFACE
change_to_vlan () {
    # local variables.
    local name="vlan$1"     # construct name = vlan + vlanid.
    local base_dev          # varible holding device name of wan port.
    local wan_if            # variable holding wan interfaces.
    local new_wan_if        # 

    # extract device name.
    network_get_device base_dev $3

    # bring down old interface/device.
    ifdown "${base_dev}"
    logger -t dhcp_opt132 "bringing down old if: ${base_dev}"

    # extract base name of device.
    base_dev=$(echo ${base_dev} | cut -d. -f1)

    # add "VLAN interface" to the "end of the file".
    uci add layer2_interface_vlan vlan_interface
    uci set layer2_interface_vlan.@vlan_interface[-1].name=${name}
    uci set layer2_interface_vlan.@vlan_interface[-1].vlan8021q=${1}
    uci set layer2_interface_vlan.@vlan_interface[-1].vlan8021p=${2}
    uci set layer2_interface_vlan.@vlan_interface[-1].ifname="${base_dev}.${1}"
    uci set layer2_interface_vlan.@vlan_interface[-1].baseifname=${base_dev}
    # and commit the change.
    uci commit layer2_interface_vlan
    logger -t dhcp_opt132 "committed update to file layer2_interface_vlan"

    # reload configuration files.
    /etc/init.d/layer2_interface_vlan reload
    logger -t dhcp_opt132 "reload layer2_interface_vlan config"

    # replace old interface (like eth0.1 with new eth0.101).
    wan_if=$(uci get network.$3.ifname)
    logger -t dhcp_opt132 "old network.${3}.ifname: $wan_if"

    # loop through the string, remove any word close to "base_dev".
    for word in ${wan_if}; do
	#echo $word
	case $word in
	    ${base_dev}*) # don't add if.
		;;
	    *)	new_wan_if=${word}' '${new_wan_if}  # add if.
		#new_wan_if+=" ${word}"  # probably not working in ash.
		;;
	esac
    done
    # append new interface.
    new_wan_if=${new_wan_if}${base_dev}.${1}
    uci set network.wan.ifname="${new_wan_if}"
    # and commit the change.
    uci commit network
    logger -t dhcp_opt132 "committed update to file network: ifname=${new_wan_if}"

    # reboot into new if configuration.
    reboot

    # debug code.
    # reload configuration files.
    #/etc/init.d/network reload
    #logger -t dhcp_opt132 "reload network config"
    # bring up new interface.
    #ifup "${base_dev}.${1}"
    #logger -t dhcp_opt132 "bringing up new if: ${base_dev}.${1}"
}



setup_interface () {
    proto_init_update "*" 1
    proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
    # TODO: apply $broadcast

    for i in $router; do
	proto_add_ipv4_route 0.0.0.0 0 "$i"
    done

    # CIDR STATIC ROUTES (rfc3442)
    [ -n "$staticroutes" ] && set_classless_routes $staticroutes
    [ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

    for dns in $dns; do
	proto_add_dns_server "$dns"
    done
    for domain in $domain; do
	proto_add_dns_search "$domain"
    done
    proto_send_update "$INTERFACE"

    if [ -n "$IFACE6RD" -a -n "$ip6rd" ]; then
	local v4mask="${ip6rd%% *}"
	ip6rd="${ip6rd#* }"
	local ip6rdprefixlen="${ip6rd%% *}"
	ip6rd="${ip6rd#* }"
	local ip6rdprefix="${ip6rd%% *}"
	ip6rd="${ip6rd#* }"
	local ip6rdbr="${ip6rd%% *}"

	uci -q batch <<-EOF >/dev/null
set network.$IFACE6RD.proto=6rd
set network.$IFACE6RD.auto=0
set network.$IFACE6RD.peeraddr=$ip6rdbr
set network.$IFACE6RD.ip4prefixlen=$v4mask
set network.$IFACE6RD.ip6prefix=$ip6rdprefix
set network.$IFACE6RD.ip6prefixlen=$ip6rdprefixlen
commit network
EOF

	ifdown "$IFACE6RD"
	/etc/init.d/network reload
	ifup "$IFACE6RD"
    fi

    [ -f /etc/config/provisioning ] && iup

    # TODO
    # [ -n "$ntpsrv" ] && 	change_state network "$ifc" lease_ntpsrv "$ntpsrv"
    # [ -n "$timesvr" ] && 	change_state network "$ifc" lease_timesrv "$timesvr"
    # [ -n "$hostname" ] &&	change_state network "$ifc" lease_hostname "$hostname"
    # [ -n "$timezone" ] && change_state network "$ifc" lease_timezone "$timezone"

    # if we get vlanid and maybe vlanpriority, configure for that.
    if [ -n "$vlanid" -a -n "$vlanpriority" ]; then
	logger -t dhcp_opt132 "vlanid: ${vlanid}, vlanpriority: ${vlanpriority}"
	change_to_vlan ${vlanid} ${vlanpriority} ${INTERFACE}
    elif [ -n "$vlanid" ]; then
	logger -t dhcp_opt132 "vlanid: ${vlanid}"
	change_to_vlan ${vlanid} 0 ${INTERFACE}
    else
	##logger -t dhcp_opt132 "no vlanid and vlan priority given"
	logger -t dhcp_opt132 "no vlanid given"
    fi
}

iup() {
	local url
	local provisioningcode
	local rest

	if [ $vendorspecinf ]; then
		url=${vendorspecinf%%,*}; rest=${vendorspecinf#*,}
		provisioningcode=${rest%%,*};
		uci_set_state provisioning iup url "$url"
		uci_set_state provisioning iup provisioningcode "$provisioningcode"
	elif [ $httpurl128 ]; then
		uci_set_state provisioning iup urliup "$httpurl128"
	elif [ $tftp ]; then
		if [ ${bootfile:0:1} == '/' ]; then 
			uci_set_state provisioning iup urliup "tftp://$tftp$bootfile"
		else
			uci_set_state provisioning iup urliup "tftp://$tftp/$bootfile"
		fi
	fi
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		setup_interface
	;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user

exit 0
