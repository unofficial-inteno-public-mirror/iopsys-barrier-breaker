Prefix some static variables with mips_linux_.
---
--- a/gdb-7.10/gdb/mips-linux-nat.c
+++ b/gdb-7.10/gdb/mips-linux-nat.c
@@ -63,12 +63,12 @@
 
 /* Assume that we have PTRACE_GETREGS et al. support.  If we do not,
    we'll clear this and use PTRACE_PEEKUSER instead.  */
-static int have_ptrace_regsets = 1;
+static int mips_linux_have_ptrace_regsets = 1;
 
 /* Does the current host support PTRACE_GETREGSET?  */
-static int have_ptrace_getregset = 1;
-static int have_ptrace_getregset_fp = 1;
-static int have_ptrace_getregset_msa = 1;
+static int mips_linux_have_ptrace_getregset = 1;
+static int mips_linux_have_ptrace_getregset_fp = 1;
+static int mips_linux_have_ptrace_getregset_msa = 1;
 
 /* Saved function pointers to fetch and store a single register using
    PTRACE_PEEKUSER and PTRACE_POKEUSER.  */
@@ -284,7 +284,7 @@ mips64_linux_regsets_fetch_registers (struct target_ops *ops,
 	{
 	  if (errno == EIO)
 	    {
-	      have_ptrace_regsets = 0;
+	      mips_linux_have_ptrace_regsets = 0;
 	      return;
 	    }
 	  perror_with_name (_("Couldn't get registers"));
@@ -309,7 +309,7 @@ mips64_linux_regsets_fetch_registers (struct target_ops *ops,
 
       /* Try the MSA regset first if vector registers are desired */
       if (rn->msa_csr != -1
-	  && have_ptrace_getregset && have_ptrace_getregset_msa)
+	  && mips_linux_have_ptrace_getregset && mips_linux_have_ptrace_getregset_msa)
 	{
 	  unsigned char w_regs[34][16];
 	  unsigned char buf[16];
@@ -323,9 +323,9 @@ mips64_linux_regsets_fetch_registers (struct target_ops *ops,
 	  if (ret < 0)
 	    {
 	      if (errno == EIO)
-		have_ptrace_getregset = 0;
+		mips_linux_have_ptrace_getregset = 0;
 	      else if (errno == EINVAL)
-		have_ptrace_getregset_msa = 0;
+		mips_linux_have_ptrace_getregset_msa = 0;
 	      else
 		perror_with_name (_("Unable to fetch FP/MSA registers."));
 	    }
@@ -367,7 +367,7 @@ mips64_linux_regsets_fetch_registers (struct target_ops *ops,
 	}
 
       /* Try the FP regset next as it may contain Config5 */
-      if (is_fp && have_ptrace_getregset && have_ptrace_getregset_fp)
+      if (is_fp && mips_linux_have_ptrace_getregset && mips_linux_have_ptrace_getregset_fp)
 	{
 	  unsigned char fp_regs[34][8];
 	  struct iovec iovec;
@@ -380,9 +380,9 @@ mips64_linux_regsets_fetch_registers (struct target_ops *ops,
 	  if (ret < 0)
 	    {
 	      if (errno == EIO)
-		have_ptrace_getregset = 0;
+		mips_linux_have_ptrace_getregset = 0;
 	      else if (errno == EINVAL)
-		have_ptrace_getregset_fp = 0;
+		mips_linux_have_ptrace_getregset_fp = 0;
 	      else
 		perror_with_name (_("Unable to fetch FP registers."));
 	    }
@@ -439,7 +439,7 @@ mips64_linux_regsets_fetch_registers (struct target_ops *ops,
 	    {
 	      if (errno == EIO)
 		{
-		  have_ptrace_regsets = 0;
+		  mips_linux_have_ptrace_regsets = 0;
 		  return;
 		}
 	      perror_with_name (_("Couldn't get FP registers"));
@@ -539,7 +539,7 @@ mips64_linux_regsets_store_registers (struct target_ops *ops,
 
       /* Try the MSA regset first if vector registers are desired */
       if (rn->msa_csr != -1
-	  && have_ptrace_getregset && have_ptrace_getregset_msa)
+	  && mips_linux_have_ptrace_getregset && mips_linux_have_ptrace_getregset_msa)
 	{
 	  unsigned char w_regs[34][16];
 	  unsigned char buf[16];
@@ -553,9 +553,9 @@ mips64_linux_regsets_store_registers (struct target_ops *ops,
 	  if (ret < 0)
 	    {
 	      if (errno == EIO)
-		have_ptrace_getregset = 0;
+		mips_linux_have_ptrace_getregset = 0;
 	      else if (errno == EINVAL)
-		have_ptrace_getregset_msa = 0;
+		mips_linux_have_ptrace_getregset_msa = 0;
 	      else
 		perror_with_name (_("Unable to fetch FP/MSA registers."));
 	    }
@@ -591,9 +591,9 @@ mips64_linux_regsets_store_registers (struct target_ops *ops,
 	      if (ret < 0)
 		{
 		  if (errno == EIO)
-		    have_ptrace_getregset = 0;
+		    mips_linux_have_ptrace_getregset = 0;
 		  if (errno == EINVAL)
-		    have_ptrace_getregset_msa = 0;
+		    mips_linux_have_ptrace_getregset_msa = 0;
 		  else
 		    perror_with_name (_("Unable to store FP/MSA registers."));
 		}
@@ -606,7 +606,7 @@ mips64_linux_regsets_store_registers (struct target_ops *ops,
 	}
 
       /* Try the FP regset next as it may contain Config5 */
-      if (is_fp && have_ptrace_getregset && have_ptrace_getregset_fp)
+      if (is_fp && mips_linux_have_ptrace_getregset && mips_linux_have_ptrace_getregset_fp)
 	{
 	  unsigned char fp_regs[34][8];
 	  struct iovec iovec;
@@ -619,9 +619,9 @@ mips64_linux_regsets_store_registers (struct target_ops *ops,
 	  if (ret < 0)
 	    {
 	      if (errno == EIO)
-		have_ptrace_getregset = 0;
+		mips_linux_have_ptrace_getregset = 0;
 	      else if (errno == EINVAL)
-		have_ptrace_getregset_fp = 0;
+		mips_linux_have_ptrace_getregset_fp = 0;
 	      else
 		perror_with_name (_("Unable to fetch FP registers."));
 	    }
@@ -666,9 +666,9 @@ mips64_linux_regsets_store_registers (struct target_ops *ops,
 	      if (ret < 0)
 		{
 		  if (errno == EIO)
-		    have_ptrace_getregset = 0;
+		    mips_linux_have_ptrace_getregset = 0;
 		  else if (errno == EINVAL)
-		    have_ptrace_getregset_fp = 0;
+		    mips_linux_have_ptrace_getregset_fp = 0;
 		  else
 		    perror_with_name (_("Unable to store FP/MSA registers."));
 		}
@@ -717,12 +717,12 @@ mips64_linux_fetch_registers (struct target_ops *ops,
 			      struct regcache *regcache, int regnum)
 {
   /* Unless we already know that PTRACE_GETREGS does not work, try it.  */
-  if (have_ptrace_regsets)
+  if (mips_linux_have_ptrace_regsets)
     mips64_linux_regsets_fetch_registers (ops, regcache, regnum);
 
   /* If we know, or just found out, that PTRACE_GETREGS does not work, fall
      back to PTRACE_PEEKUSER.  */
-  if (!have_ptrace_regsets)
+  if (!mips_linux_have_ptrace_regsets)
     super_fetch_registers (ops, regcache, regnum);
 }
 
@@ -734,12 +734,12 @@ mips64_linux_store_registers (struct target_ops *ops,
 			      struct regcache *regcache, int regnum)
 {
   /* Unless we already know that PTRACE_GETREGS does not work, try it.  */
-  if (have_ptrace_regsets)
+  if (mips_linux_have_ptrace_regsets)
     mips64_linux_regsets_store_registers (ops, regcache, regnum);
 
   /* If we know, or just found out, that PTRACE_GETREGS does not work, fall
      back to PTRACE_PEEKUSER.  */
-  if (!have_ptrace_regsets)
+  if (!mips_linux_have_ptrace_regsets)
     super_store_registers (ops, regcache, regnum);
 }
 
