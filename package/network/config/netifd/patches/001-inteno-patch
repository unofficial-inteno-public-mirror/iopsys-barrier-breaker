From 9a06c065e10896ff4d65337fd9df88093dbf3ec2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Schr=C3=B6der?= <mkschreder.uk@gmail.com>
Date: Mon, 26 Oct 2015 15:50:59 +0100
Subject: [PATCH] add inteno patches

---
 config.c       |  6 ++++++
 device.c       |  3 ---
 interface.c    | 34 ++++++++++++++++++++++++++++--
 interface.h    |  1 +
 system-linux.c | 66 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ubus.c         |  2 ++
 6 files changed, 107 insertions(+), 5 deletions(-)

diff --git a/config.c b/config.c
index 5d3db9f..50ee08d 100644
--- a/config.c
+++ b/config.c
@@ -79,6 +79,7 @@ config_parse_interface(struct uci_section *s, bool alias)
 	const char *type = NULL, *disabled;
 	struct blob_attr *config;
 	bool bridge = false;
+	bool anywan = false;
 
 	disabled = uci_lookup_option_string(uci_ctx, s, "disabled");
 	if (disabled && !strcmp(disabled, "1"))
@@ -94,6 +95,8 @@ config_parse_interface(struct uci_section *s, bool alias)
 
 		bridge = true;
 	}
+	else if (type && !strcmp(type, "anywan"))
+		anywan = true;
 
 	uci_to_blob(&b, s, &interface_attr_list);
 
@@ -107,6 +110,9 @@ config_parse_interface(struct uci_section *s, bool alias)
 	if (!bridge && uci_to_blob(&b, s, simple_device_type.config_params))
 		iface->device_config = true;
 
+	if (anywan)
+		iface->anywan = true;
+
 	config = blob_memdup(b.head);
 	if (!config)
 		goto error;
diff --git a/device.c b/device.c
index a29c981..0b9d758 100644
--- a/device.c
+++ b/device.c
@@ -441,9 +441,6 @@ device_get(const char *name, int create)
 {
 	struct device *dev;
 
-	if (strchr(name, '.'))
-		return get_vlan_device_chain(name, create);
-
 	if (name[0] == '@')
 		return device_alias_get(name + 1);
 
diff --git a/interface.c b/interface.c
index ffe7988..a5987df 100644
--- a/interface.c
+++ b/interface.c
@@ -551,6 +551,11 @@ interface_claim_device(struct interface *iface)
 {
 	struct interface *parent;
 	struct device *dev = NULL;
+	char ifnames[256];
+	char *devnames = NULL;
+	char devname[10][10];
+	int devno = 0;
+	int i;
 
 	if (iface->parent_iface.iface)
 		interface_remove_user(&iface->parent_iface);
@@ -561,13 +566,33 @@ interface_claim_device(struct interface *iface)
 		interface_add_user(&iface->parent_iface, parent);
 	} else if (iface->ifname &&
 		!(iface->proto_handler->flags & PROTO_FLAG_NODEV)) {
-		dev = device_get(iface->ifname, true);
+		if(!iface->anywan)
+			dev = device_get(iface->ifname, true);
 		interface_set_device_config(iface, dev);
 	} else {
 		dev = iface->ext_dev.dev;
 	}
 
-	if (dev)
+	if (iface->anywan) {
+		strcpy(ifnames, iface->ifname);
+		devnames = strtok(ifnames, " ");
+		while (devnames != NULL)
+		{
+		    strcpy(devname[devno], devnames);
+		    devnames = strtok(NULL, " ");
+		    devno++;
+		}
+
+		for (i=0; i<devno; i++) {
+			dev = device_get(devname[i], true);
+			if (dev && dev->present) {
+				interface_set_main_dev(iface, dev);
+				break;
+			}
+		}
+		memset(ifnames, '\0', sizeof(ifnames));
+	}
+	else if (dev)
 		interface_set_main_dev(iface, dev);
 
 	if (iface->proto_handler->flags & PROTO_FLAG_INIT_AVAILABLE)
@@ -996,6 +1021,10 @@ interface_set_up(struct interface *iface)
 		return 0;
 
 	interface_clear_errors(iface);
+
+	if (iface->anywan && !iface->available)
+		interface_claim_device(iface);
+
 	if (!iface->available) {
 		interface_add_error(iface, "interface", "NO_DEVICE", NULL, 0);
 		return -1;
@@ -1147,6 +1176,7 @@ interface_change_config(struct interface *if_old, struct interface *if_new)
 	if_old->parent_ifname = if_new->parent_ifname;
 	if_old->proto_handler = if_new->proto_handler;
 	if_old->force_link = if_new->force_link;
+	if_old->anywan = if_new->anywan;
 
 	if_old->proto_ip.no_dns = if_new->proto_ip.no_dns;
 	interface_replace_dns(&if_old->config_ip, &if_new->config_ip);
diff --git a/interface.h b/interface.h
index 6f9112c..d836c40 100644
--- a/interface.h
+++ b/interface.h
@@ -112,6 +112,7 @@ struct interface {
 	bool link_state;
 	bool force_link;
 	bool dynamic;
+	bool anywan;
 
 	time_t start_time;
 	enum interface_state state;
diff --git a/system-linux.c b/system-linux.c
index f51c078..6741cc7 100644
--- a/system-linux.c
+++ b/system-linux.c
@@ -793,6 +793,28 @@ out:
 	nl_cb_put(cb);
 }
 
+static bool
+is_parent_dev(const char *name)
+{
+	FILE *fp;
+	char cmnd[64];
+	char baseif[8];
+	bool ret = false;
+
+	if ((strstr(name, "atm") || strstr(name, "ptm")) && !strchr(name, '.'))
+		ret = true;
+	else if (strstr(name, "eth") && !strchr(name, '.')) {
+		sprintf(cmnd, "db get hw.board.ethernetWanPort | tr -d '\n'");
+		if ((fp = popen(cmnd, "r"))) {
+			if(fgets(baseif, sizeof(baseif), fp) && !strcmp(baseif, name))
+				ret = true;
+			pclose(fp);
+		}
+	}
+
+	return ret;
+}
+
 /*
  * Clear bridge (membership) state and bring down device
  */
@@ -805,6 +827,9 @@ void system_if_clear_state(struct device *dev)
 	if (dev->external || !dev->ifindex)
 		return;
 
+	if (is_parent_dev(dev->ifname))
+		return;
+
 	system_if_flags(dev->ifname, 0, IFF_UP);
 
 	if (system_is_bridge(dev->ifname, buf, sizeof(buf))) {
@@ -1227,6 +1252,11 @@ int system_if_up(struct device *dev)
 	/* Only keep orig settings based on what needs to be set */
 	dev->orig_settings.flags &= dev->settings.flags;
 	system_if_apply_settings(dev, &dev->settings, dev->settings.flags);
+
+	device_set_ifindex(dev, system_if_resolve(dev));
+	if (strchr(dev->ifname, '.'))
+		system_if_flags(dev->ifname, IFF_MULTICAST, 0);
+
 	return system_if_flags(dev->ifname, IFF_UP, 0);
 }
 
@@ -2410,6 +2440,42 @@ failure:
 		return system_add_gre_tunnel(name, "ip6gre", link, tb, true);
 	} else if (!strcmp(str, "gretapip6")) {
 		return system_add_gre_tunnel(name, "ip6gretap", link, tb, true);
+#else
+	} else if (!strcmp(str, "ipip6")) {
+		char cmdStr[4096],remoteIp[INET6_ADDRSTRLEN],addr6[INET6_ADDRSTRLEN];
+		struct ip6_tnl_parm p = {
+			.link = link,
+			.proto = IPPROTO_IPIP,
+			.hop_limit = (ttl) ? ttl : 64,
+			.encap_limit = 4,
+		};
+
+		if ((cur = tb[TUNNEL_ATTR_LOCAL]) &&
+				inet_pton(AF_INET6, blobmsg_data(cur), &p.laddr) < 1)
+			return -EINVAL;
+
+		if ((cur = tb[TUNNEL_ATTR_REMOTE]) &&
+				inet_pton(AF_INET6, blobmsg_data(cur), &p.raddr) < 1)
+			return -EINVAL;
+
+		strncpy(p.name, name, sizeof(p.name));
+		//if (tunnel_ioctl("ip6tnl0", SIOCADDTUNNEL, &p) < 0)
+		//      return -1;
+		inet_ntop(AF_INET6, &(p.raddr), remoteIp, INET6_ADDRSTRLEN);
+		inet_ntop(AF_INET6, &(p.laddr), addr6, INET6_ADDRSTRLEN);
+		snprintf(cmdStr, sizeof(cmdStr),"ip -6 tunnel add %s mode ip4ip6 remote %s local %s tclass inherit dscp inherit" ,name, remoteIp, addr6);
+		system(cmdStr);
+		snprintf(cmdStr, sizeof(cmdStr), "ip link set dev %s up", name);
+		system(cmdStr);
+		snprintf(cmdStr, sizeof(cmdStr), "ip -6 addr add %s dev %s", addr6,name);
+		system(cmdStr);
+		snprintf(cmdStr, sizeof(cmdStr), "ip ro add default dev %s",name);
+		system(cmdStr);
+		/* RFC 6333 section 5.7: 192.0.0.2/29 is reserved for B4 */
+		snprintf(cmdStr, sizeof(cmdStr), "ip addr add 192.0.0.2/29 dev %s",name);
+		system(cmdStr);
+		return 0;
+
 #endif
 	} else if (!strcmp(str, "ipip")) {
 		return system_add_proto_tunnel(name, IPPROTO_IPIP, link, tb);
diff --git a/ubus.c b/ubus.c
index c834d11..ea9d86f 100644
--- a/ubus.c
+++ b/ubus.c
@@ -1207,6 +1207,8 @@ netifd_ubus_add_interface(struct interface *iface)
 		free(name);
 		obj->name = NULL;
 	}
+	if (iface->anywan)
+		netifd_ubus_interface_event(iface, true);
 }
 
 void
-- 
1.9.1

