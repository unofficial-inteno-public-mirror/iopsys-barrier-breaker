#!/bin/sh

. /lib/functions.sh
. /usr/share/libubox/jshn.sh

wifibutton_action() {
	local wlstatus="$(uci -q get wireless.status.wlan)"
	if [ "$wlstatus" == "0" ]; then
		uci -q set wireless.wl0.disabled=0
		uci -q set wireless.wl1.disabled=0
		uci -q set wireless.status.wlan="1"
	else
		uci -q set wireless.wl0.disabled=1
		uci -q set wireless.wl1.disabled=1
		uci -q set wireless.status.wlan="0"
	fi
	uci commit wireless
	killall -9 wifi 2>/dev/null
	/sbin/wifi &
}

wpsbutton_action () {
	killall -USR2 wps_monitor
}

get_wifi_wet_info() {
	local opt="$1"
	opt="${opt:-ifname}"
	handle_interface() {
		config_get mode "$1" mode
		if [ "$mode" == "wet" ] ; then
			config_get val "$1" $opt
			echo "$val"
		fi
	}
	config_load wireless
	config_foreach handle_interface wifi-iface "$device"
}

wpscbutton_action () {
	local wanbaseif=$(uci get layer2_interface_ethernet.Wan.baseifname)
	local cur_mode=$(uci -q get netmode.setup.curmode)
	local wet_iface wet_ssid carrier fl
	local wps_paired=0
	local tm=0

	wps_client_get_credentials () {
		wet_iface="$(get_wifi_wet_info ifname)"
		wlctl -i $wet_iface down
		wlctl -i $wet_iface apsta 1
		wlctl -i $wet_iface wet 1
		wlctl -i $wet_iface up
		nvram set ${wet_iface}_mode="wet"
		nvram set ${wet_iface}_apsta="1"
		nvram set ${wet_iface}_wps_mode="enabled"
		for iface in $(nvram show | grep _wps_mode | sed -n -r 's/(.*)_wps_mode=.*/\1/p'); do
			[ "$iface" != "$wet_iface" ] && nvram set ${iface}_wps_mode="disabled"
		done
		killall -q -15 wps_monitor 2>/dev/null # Kill Child Thread first, -15: SIGTERM to force to remove WPS IE
		sleep 1
		echo "wps_monitor STA oneshot mode" > /dev/console
		wps_monitor oneshot && wps_paired=1
	}

	json_load $(devstatus $wanbaseif)
	json_get_var carrier carrier
	[ "$carrier" == "1" ] && return

	if [ "$cur_mode" == "repeater" ] ; then
		wps_client_get_credentials
		[ $wps_paired -eq 0 ] && wifi reload
	else
		ubus call leds set  '{"state" : "test"}'
		echo "Switching to 'repeater' mode" > /dev/console
		mkdir -p /tmp/netmode_config_backup
		cp -af /etc/config/* /tmp/netmode_config_backup/
		uci set netmode.setup.curmode=repeater
		uci set netmode.repeater.reboot="0"
		/etc/init.d/netmode reload
		wps_client_get_credentials
		if [ $wps_paired -eq 1 ] ; then
			echo "WPS pair is successful; WiFi credentials are received from $(nvram get ${wet_iface}_ssid)" > /dev/console
			uci delete netmode.repeater.reboot
			uci commit netmode
			while [ ! -e "/tmp/got_wps_credentials_from_nvram" ]; do
				[ $tm -gt 30 ] && break
				sleep 1
				tm=$((tm+1))
			done
			echo "Restarting network services" > /dev/console
			/etc/init.d/enviroment reload
			ubus call uci commit "{\"config\":\"layer2_interface_ethernet\"}"
			#ubus call uci commit "{\"config\":\"network\"}"
			ubus call network reload
			ifup "$(get_wifi_wet_info network)"
			ubus call leds set  '{"state" : "normal"}'
			return
		fi
		ubus call leds set  '{"state" : "normal"}'
		echo "Could not switch to 'repeater' mode; going back to '$cur_mode' mode" > /dev/console
		uci set netmode.setup.curmode="$cur_mode"
		cp -af /tmp/netmode_config_backup/* /etc/config/
		rm -rf /tmp/netmode_config_backup
		wifi reload
	fi
}

infobutton_action() {
	local parsed=$(ubus call leds status)
	json_load "$parsed"
	json_get_var ledstate state

	[ "$ledstate" == "normal" ] && {
		ubus call leds set '{"state": "info"}'
		ubus call led.eco set '{"state": "notice"}'
	} || {
		ubus call leds set '{"state": "normal"}'
		ubus call led.eco set '{"state": "off"}'
	}
}

case "$ACTION" in
        add|register)
        [ "resetbutton" == "$INTERFACE" ] && {
	        printf "\n\nReset button is pressed\n\n" > /dev/console
		/sbin/defaultreset
        }
        [ "ecobutton" == "$INTERFACE" -o "wifibutton" == "$INTERFACE" ] && {
		[ -e "/tmp/wps_active" ] && return
	        printf "\n\nWiFi button is pressed\n\n" > /dev/console
		wifibutton_action
        }
        [ "wpsbutton" == "$INTERFACE" ] && {
		[ -e "/tmp/wps_active" ] && return
		touch /tmp/wps_active
	        printf "\n\nWPS button is pressed\n\n" > /dev/console
		wpsbutton_action
		rm /tmp/wps_active
        }
	[ "wpscbutton" == "$INTERFACE" ] && {
		[ -e "/tmp/wps_active" ] && return
		touch /tmp/wps_active
		printf "\n\nWPS client button is pressed\n\n" > /dev/console
		wpscbutton_action
		rm /tmp/wps_active
	}
        [ "dectshort" == "$INTERFACE" ] && {
	        printf "\n\nDECT button is pressed\n" > /dev/console
		/usr/bin/dect -b 1 | logger -t hotplug -p user.info
        }
        [ "dectlong" == "$INTERFACE" ] && {
	        printf "\n\nDECT button is long-pressed\n" > /dev/console
		case $(uci get dect.dect.radio) in
			auto|off)
				uci set dect.dect.radio=on
			;;
			on)
				uci set dect.dect.radio=off
			;;
		esac
		uci commit dect
		/usr/bin/dect -c | logger -t hotplug -p user.info
		/usr/bin/dect -b 2 | logger -t hotplug -p user.info
        }
	[ "pairbutton" == "$INTERFACE" ] && {
		printf "\n\nPair button pressed\n\n" > /dev/console
		wpsbutton_action
		/usr/bin/dect -b 1 | logger -t hotplug -p user.info
	}
        [ "infobutton" == "$INTERFACE" ] && {
                printf "\n\nINFO button is pressed\n\n" > /dev/console
		infobutton_action
        }
	[ "communicationbutton" == "$INTERFACE" ] && {
		printf "\n\nCommunication button pressed - not implemented!\n\n" > /dev/console
	}
	[ "servicebutton" == "$INTERFACE" ] && {
		printf "\n\nService button pressed - not implemented!\n\n" > /dev/console
	}
	[ "cancelbutton" == "$INTERFACE" ] && {
		printf "\n\nCancel button pressed - not implemented!\n\n" > /dev/console
	}
	[ "extbutton" == "$INTERFACE" ] && {
		printf "\n\nEXT button pressed - not implemented!\n\n" > /dev/console
	}
	[ "touch_near" == "$INTERFACE" ] && {
	        ubus call leds proximity '{ "timeout" : "15", "light-all" : "2" }'
	}
	[ "touch_far" == "$INTERFACE" ] && {
	        ubus call leds proximity '{ "timeout" : "300" }'
	}
        ;;
        remove|unregister)
        ;;
esac
