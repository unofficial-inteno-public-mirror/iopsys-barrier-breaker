#!/bin/sh

local DEV=""
local DOWNLINK=""
local UPLINK=""
local RESET=""
local XDSL=""

usage() {
	echo "bwlimit -i <DEVICE> -d <DOWNLINK SPEED>kbps -u <UPLINK SPEED>kbps"
	echo "or"
	echo "bwlimit -i <DEVICE> -x # set bandwidth limitation based on xDSL rate"
	echo "or"
	echo "bwlimit -i <DEVICE> -r # reset bandwidth limit on a specific device"
	exit
}

while [ -n "$1" ]; do 
	case "$1" in
		-i) DEV="$2"; shift;;
		-d) DOWNLINK="$2"; shift;;
		-u) UPLINK="$2"; shift;;
		-x) XDSL="1";;
		-r) RESET="1";;
		*) echo usage; break;;
	esac
	shift;
done

if [ -z "$DEV" ]; then
	echo "No device is given"
	usage
fi

if ! ifconfig $DEV >/dev/null 2>&1; then 
	echo "$DEV is an invalid device"
	usage
fi

if [ -n "$XDSL" ]; then
	DOWNLINK=$(xdslctl info --stats | grep Bearer | grep rate | awk '{print$11}')
	UPLINK=$(xdslctl info --stats | grep Bearer | grep rate | awk '{print$6}')

	[ -n "$DOWNLINK" ] || exit
	[ -n "$UPLINK" ] || exit

	# limit bandwidth to 95% of xDSL Bearer rate
	DOWNLINK=$((95*$DOWNLINK/100))
	UPLINK=$((95*$UPLINK/100))
fi

if [ -z "$DOWNLINK" -a -z "$UPLINK" -a -z "$RESET" ]; then
	usage
fi

# clean existing down- and uplink qdiscs, hide errors
tc qdisc del dev $DEV root    2> /dev/null > /dev/null
tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null

if [ -n "$UPLINK" ]; then
	# install root HTB, point default traffic to 1:20:
	tc qdisc add dev $DEV root handle 1: htb default 20

	# shape everything at $UPLINK speed - this prevents huge queues in your
	# DSL modem which destroy latency:
	tc class add dev $DEV parent 1: classid 1:1 htb rate ${UPLINK}kbit burst 6k

	# high prio class 1:10:
	tc class add dev $DEV parent 1:1 classid 1:10 htb rate ${UPLINK}kbit \
		burst 6k prio 1

	# bulk & default class 1:20 - gets slightly less traffic, 
	# and a lower priority:
	tc class add dev $DEV parent 1:1 classid 1:20 htb rate $((9*$UPLINK/10))kbit \
		burst 6k prio 2

	# both get Stochastic Fairness:
	tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
	tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10

	# TOS Minimum Delay (ssh, NOT scp) in 1:10:
	tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
		match ip tos 0x10 0xff  flowid 1:10

	# ICMP (ip protocol 1) in the interactive class 1:10 so we 
	# can do measurements & impress our friends:
	tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
		match ip protocol 1 0xff flowid 1:10

	# To speed up downloads while an upload is going on, put ACK packets in
	# the interactive class:
	tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
		match ip protocol 6 0xff \
		match u8 0x05 0x0f at 0 \
		match u16 0x0000 0xffc0 at 2 \
		match u8 0x10 0xff at 33 \
		flowid 1:10

	# rest is 'non-interactive' ie 'bulk' and ends up in 1:20
fi

if [ -n "$DOWNLINK" ]; then
	# attach ingress policer:
	tc qdisc add dev $DEV handle ffff: ingress

	# filter *everything* to it (0.0.0.0/0), drop everything that's
	# coming in too fast:
	tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
		0.0.0.0/0 police rate ${DOWNLINK}kbit burst 10k drop flowid :1
fi

