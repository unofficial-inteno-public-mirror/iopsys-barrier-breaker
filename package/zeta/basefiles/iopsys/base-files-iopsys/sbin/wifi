#!/bin/sh

. /lib/functions.sh
. /usr/share/libubox/jshn.sh
. /lib/network/brcmwifi.sh

exec >/dev/null 2>&1

local _ACTION="$1"
local _DOWN=0
local _RELOAD=0
local _VIFNUM=0
local _WDEVNUM=-1
local _WIDX=0

wifi_detect() {
	local WLDIR="/tmp/wireless"
	local wls="wl0 wl1"
	local vnos="0 1 2 3 4 5 6 7 8"
	local bands band bwidth country hwmode pcid wl bno doth dfsc scntmr freq ch vdev vn apsd
	local BMAC=$(cat /proc/nvram/BaseMacAddr | tr '[a-z]' '[A-Z]')
	local DMAC=$(echo $BMAC | awk '{print$NF}')
	BMAC=${BMAC// /}
	local BSSID=$(printf "%X\n" $((0x$BMAC + 2)))
	local BSSID2=$(echo -n $BSSID | tail -c 2)
	local BSSID4=$(echo -n $BSSID | tail -c 4)
	local BSSID6=$(echo -n $BSSID | tail -c 6)
	local DECIMAL=$(printf "%d\n" 0x${DMAC/:/})
	DECIMAL=$((DECIMAL+100))
	local WPAKEY=$(cat /proc/nvram/WpaKey)
	WPAKEY="${WPAKEY:-1234567890}"
	local SSID="$(uci -q get wireless.@wifi-iface[0].ssid)"
	local ENCR="$(uci -q get wireless.@wifi-iface[0].encryption)"
	local KEY="$(uci -q get wireless.@wifi-iface[0].key)"
	local GTK="$(uci -q get wireless.@wifi-iface[0].gtk_rekey)"
	local WPS="$(uci -q get wireless.@wifi-iface[0].wps_pbc)"
	local NET="$(uci -q get wireless.@wifi-iface[0].network)"

	local PSID="$(uci -q get wireless.preferred.ssid)"
	local PENC="$(uci -q get wireless.preferred.enc)"
	local PKEY="$(uci -q get wireless.preferred.key)"
	local PGTK="$(uci -q get wireless.preferred.gtk)"
	local PWPS="$(uci -q get wireless.preferred.wpsb)"
	local PHW5="$(uci -q get wireless.preferred.hw5g)"
	local PHW2="$(uci -q get wireless.preferred.hw2g)"
	local PBW5="$(uci -q get wireless.preferred.bw5g)"
	local PBW2="$(uci -q get wireless.preferred.bw2g)"
	local PCH5="$(uci -q get wireless.preferred.ch5g)"
	local PCH2="$(uci -q get wireless.preferred.ch2g)"
	local PDFS="$(uci -q get wireless.preferred.dfsc)"
	local PCNT="$(uci -q get wireless.preferred.country)"
	local PTMR="$(uci -q get wireless.preferred.scntmr)"
	local PEXT="$(uci -q get wireless.preferred.extrassid)"
	local PGST="$(uci -q get wireless.preferred.guest)"
	local PGNT="$(uci -q get wireless.preferred.gnet)"
	local PGEN="$(uci -q get wireless.preferred.genc)"
	local PGKY="$(uci -q get wireless.preferred.gkey)"
	local PGDS="$(uci -q get wireless.preferred.gdis)"
	local PAPS="$(uci -q get wireless.preferred.apsd)"
	local PMAX="$(uci -q get wireless.preferred.maxassoc)"

	local GNET="${PGNT:-guest}"
	local GENC="${PGEN:-none}"
	local GKEY="$PGKY"
	local GDIS="${PGDS:-1}"

	[ -n "$SSID" ] || SSID="${PSID:-Inteno-$BSSID4}"
	[ -n "$ENCR" ] || ENCR=$PENC
	[ -n "$KEY" ] || KEY=$PKEY
	[ -n "$GTK" ] || GTK=$PGTK
	[ -n "$WPS" ] || WPS=$PWPS

	# zero PEXT tag if not dual wifi
	wlctl -i wl1 ap >/dev/null 2>&1 || PEXT="0"

	pcID() {
		wlctl -i $1 revinfo | awk 'FNR == 2 {print}' | cut -d'x' -f2
	}
	is5G() {
		[ "$(db get hw.$1.bands)" == "a" ] && return 0 || return 1
	}
	isAC() {
		[ "$(db get hw.$1.is_ac)" == "1" ] && return 0 || return 1
	}
	populate_chanspecs() {
		wlctl -i $1 country $country
		wlctl -i $1 chanspecs -b $bno -w 20 | awk '{print$1}' > /$WLDIR/$1"_chanspecs"
		wlctl -i $1 chanspecs -b $bno -w 40 | awk '{print$1}' >> /$WLDIR/$1"_chanspecs"
		wlctl -i $1 chanspecs -b $bno -w 80 | awk '{print$1}' >> /$WLDIR/$1"_chanspecs"
		sed -i '/^$/d' /$WLDIR/$1"_chanspecs"
	}

	if ! uci -q get wireless.status; then
		uci add wireless wifi-status
		uci rename wireless.@wifi-status[-1]=status
		uci set wireless.status.wlan=1
	fi

	mkdir -p $WLDIR
	for wl in $wls; do
		if wlctl -i $wl ap >/dev/null 2>&1; then
			pcid=$(pcID $wl)
			country="${PCNT:-EU/13}"
			scntmr="${PTMR:-120}"
			apsd="${PAPS:-1}"
			if $(is5G $pcid); then
				freq="5G"
				hwmode="${PHW5:-auto}"
				band="a"
				bwidth="${PBW5:-40}"
				ch="${PCH5:-auto}"
				bno=5
				doth="1"
				dfsc="${PDFS:-1}"
				$(isAC $pcid) && hwmode="${PHW5:-11ac}"
			else
				freq="2.4G"
				hwmode="${PHW2:-auto}"
				band="b"
				bwidth="${PBW2:-20}"
				ch="${PCH2:-auto}"
				bno=2
				doth="0"
				dfsc=""
			fi
			populate_chanspecs $wl
			if ! uci -q get wireless.$wl; then
				cat >> /etc/config/wireless <<EOF
config wifi-device '$wl'
	option type 'broadcom'
	option country '$country'
	option band '$band'
	option bandwidth '$bwidth'
	option hwmode '$hwmode'
	option channel '$ch'
	option scantimer '$scntmr'
	option wmm '1'
	option wmm_noack '0'
	option wmm_apsd '$apsd'
	option txpower '100'
	option rateset 'default'
	option frag '2346'
	option rts '2347'
	option dtim_period '1'
	option beacon_int '100'
	option rxchainps '0'
	option rxchainps_qt '10'
	option rxchainps_pps '10'
	option rifs '0'
	option rifs_advert '0'
	option maxassoc '32'
	option doth '$doth'

config wifi-iface
	option device '$wl'
	option network '${NET:-lan}'
	option mode 'ap'
	option ssid '${SSID}'
	option encryption '${ENCR:-mixed-psk}'
	option cipher 'auto'
	option key '${KEY:-$WPAKEY}'
	option gtk_rekey '${GTK:-3600}'
	option macfilter '0'
	option wps_pbc '${WPS:-1}'
	option wmf_bss_enable '1'
	option bss_max '16'

EOF
				if [ "$PEXT" == "1" ]; then
					cat >> /etc/config/wireless <<EOF
config wifi-iface
	option device '$wl'
	option network '${NET:-lan}'
	option mode 'ap'
	option ssid '${SSID}-$freq'
	option encryption '${ENCR:-mixed-psk}'
	option cipher 'auto'
	option key '${KEY:-$WPAKEY}'
	option gtk_rekey '${GTK:-3600}'
	option macfilter '0'
	option wps_pbc '0'
	option wmf_bss_enable '1'
	option bss_max '16'

EOF
				fi
				if [ "$PGST" == "1" ]; then
					cat >> /etc/config/wireless <<EOF
config wifi-iface
	option device '$wl'
	option network '${GNET:-guest}'
	option mode 'ap'
	option ssid '${SSID}-Guest'
	option encryption '${GENC:-none}'
	option key '${GKEY:-$WPAKEY}'
	option macfilter '0'
	option wps_pbc '0'
	option wmf_bss_enable '1'
	option bss_max '16'
	option disabled '$GDIS'

EOF
				fi
				uci -q set wireless.$wl.dfsc="$dfsc"
			else
				uci -q get wireless.$wl.maxassoc || uci -q set wireless.$wl.maxassoc="${PMAX:-32}"
				uci -q set wireless.$wl.band="$band"
				uci -q set wireless.$wl.doth="$doth"
			fi
		else
			uci -q delete wireless.$wl
			for vn in $vnos; do
				vdev="$(uci get wireless.@wifi-iface[$vn].device)"
				if [ $vdev == "$wl" ]; then
					uci -q delete wireless.@wifi-iface[$vn]
				else
					uci -q get wireless.@wifi-iface[$vn].bss_max || uci -q set wireless.@wifi-iface[$vn].bss_max=16
				fi
			done
		fi
	done
	uci -q delete wireless.preferred
	uci commit wireless
	sed -i "s/\$DECIMAL/$DECIMAL/g" /etc/config/wireless
	sed -i "s/\$BSSID6/$BSSID6/g" /etc/config/wireless
	sed -i "s/\$BSSID4/$BSSID4/g" /etc/config/wireless
	sed -i "s/\$BSSID2/$BSSID2/g" /etc/config/wireless
	sed -i "s/\$BSSID/$BSSID/g" /etc/config/wireless
	touch /tmp/wireless/first
}

map_networks() {
	# map all interfaces to corresponding networks by nvram parameters
	local _acnt=0
	local vif

	find_wireless_device() {
		local interface=$1
		local vif=$2
		local found=0
		local ifname="$(uci -q get network.$interface.ifname)"
		local net="$(nvram get "$vif"_network)"
		local ifc

		[ -z "$net" ] && return

		for ifc in $ifname; do
			if [ $ifc == $vif ]; then
				found=1
				break
			fi
		done

		if [ $found -eq 0 ]; then
			if [ $interface == $net ]; then
				uci -q set network.$interface.ifname="$ifname $vif"
			fi
		fi
	}

	tag_network() {
		local interface=$1
		local ifname="$(uci -q get network.$interface.ifname)"

		[ "$_acnt" == "0" ] && _acnt=""
		[ "$interface" == "loopback" ] && continue

		config_get typ $interface type
		nvram set lan"$_acnt"_ifnames="$ifname"
		if [ $typ == "bridge" ]; then
			nvram set lan"$_acnt"_ifname="br-$interface"
			nvram set lan"$_acnt"_hwaddr="$(ifconfig br-$interface | grep HWaddr | awk '{print$NF}')"
		else
			nvram set lan"$_acnt"_ifname="$ifname"
			nvram set lan"$_acnt"_hwaddr="$(ifconfig $ifname | grep HWaddr | awk '{print$NF}')"
		fi
		_acnt=$((_acnt+1))
	}

	config_load network
	for vif in wl0 $(nvram get wl0_vifs) wl1 $(nvram get wl1_vifs); do
		config_foreach find_wireless_device interface $vif
	done
	config_foreach tag_network interface
	uci commit network
}

wps_settings() {
	nvram set wps_aplockdown=0
	#nvram set wps_autho_sta_mac=00:00:00:00:00:00
	nvram set wps_config=DONE
	nvram set wps_config_command=0
	#nvram set wps_config_method=0x228c
	nvram set wps_currentband=
	nvram set wps_device_name=Inteno
	#nvram set wps_device_pin=36678877
	nvram set wps_method=1
	nvram set wps_mfstring=Broadcom
	nvram set wps_mode=disabled
	nvram set wps_modelname=Broadcom
	nvram set wps_modelnum=123456
	nvram set wps_proc_mac=
	nvram set wps_proc_status=0
	nvram set wps_restart=0
	nvram set wps_sta_pin=00000000
	nvram set wps_status=0
	nvram set wps_timeout_enable=0
	nvram set wps_uuid=0x000102030405060708090a0b0c0d0ebb
	nvram set wps_version2=enabled
}

vif_settings() {
	local cfg=$1
	local iface=$2
	local device ifname enabled isolate mode ssid network
	local encryption cipher key key1 key2 key3 key4 gtk_rekey
	local macmode maclist wps wmf_bss_enable bss_max bss_enabled

	config_get device $cfg device
	config_get disabled $cfg disabled "0"
	config_get isolate $cfg isolate "0"
	config_get mode $cfg mode "ap"
	config_get ssid $cfg ssid ""
	config_get encryption $cfg encryption "*DEL*"
	config_get cipher $cfg cipher
	config_get key_index "$vif" key_index "1"
	config_get key $cfg key "1"
	config_get key1 $cfg key1 "1234567890123"
	config_get key2 $cfg key2 "1234567890123"
	config_get key3 $cfg key3 "1234567890123"
	config_get key4 $cfg key4 "1234567890123"
	config_get gtk_rekey $cfg gtk_rekey "3600"
	config_get macmode $cfg macmode "0"
	maclist="$(uci -q get wireless.$cfg.maclist)"
	config_get wps $cfg wps_pbc "0"
	config_get wmm_bss_disable $cfg wmm_bss_disable "0"
	config_get wmf_bss_enable $cfg wmf_bss_enable "0"
	config_get bss_max $cfg bss_max "16"
	config_get network $cfg network "lan"

	[ "$disabled" == "1" ] && bss_enabled=0 || bss_enabled=1
	[ "$wps" == "1" ] && wps_mode=enabled || wps_mode=disabled

	nvram set "$iface"_auth=0
	nvram set "$iface"_auth_mode=*DEL*
	nvram set "$iface"_preauth=0
	nvram set "$iface"_net_auth_type=1
	nvram set "$iface"_akm="*DEL*"
	nvram set "$iface"_wep=disabled
	nvram set "$iface"_key="$key_index"
	nvram set "$iface"_key1=$key1
	nvram set "$iface"_key2=$key2
	nvram set "$iface"_key3=$key3
	nvram set "$iface"_key4=$key4
	case "$encryption" in
		*wep*)
			nvram set "$iface"_wep=enabled
			case "$encryption" in
				*shared*) nvram set "$iface"_auth=1;;
			esac
			case "$key" in
				[1234]) echo -n "" ;;
				*) nvram set "$iface"_key=$key ;;
			esac
		;;
		*psk*)
			nvram set "$iface"_wpa_gtk_rekey=$gtk_rekey
			# psk version + default cipher
			case "$encryption" in
				*mixed*|*psk+psk2*) nvram set "$iface"_akm="psk psk2"; nvram set "$iface"_crypto=tkip+aes;;
				*psk2*) nvram set "$iface"_akm=psk2; nvram set "$iface"_crypto=aes;;
				*) nvram set "$iface"_akm=psk; nvram set "$iface"_crypto=tkip;;
			esac
			# cipher override
			case "$cipher" in
				*tkip+aes*|*tkip+ccmp*|*aes+tkip*|*ccmp+tkip*) nvram set "$iface"_crypto=tkip+aes;;
				*aes*|*ccmp*) nvram set "$iface"_crypto=aes;;
				*tkip*) nvram set "$iface"_crypto=tkip;;
			esac
			nvram set "$iface"_wpa_psk="$key"
			nvram set "$iface"_auth_mode="psk"
		;;
	esac

	nvram set "$iface"_ap_isolate=$isolate
	nvram set "$iface"_bss_enabled=$bss_enabled
	nvram set "$iface"_bss_maxassoc=$bss_max
	nvram set "$iface"_closed=$closed
	nvram set "$iface"_hspot=0
	nvram set "$iface"_ifname="$iface"
	nvram set "$iface"_maclist="$maclist"
	nvram set "$iface"_macmode=$macmode
	nvram set "$iface"_mfp=0
	nvram set "$iface"_mode=$mode
	nvram set "$iface"_net_reauth=36000
	nvram set "$iface"_radio=1
	nvram set "$iface"_radius_ipaddr=0.0.0.0
	nvram set "$iface"_radius_key=*DEL*
	nvram set "$iface"_radius_port=1812
	nvram set "$iface"_ssid="$ssid"
	nvram set "$iface"_wme_bss_disable=$wmm_bss_disable
	nvram set "$iface"_wmf_bss_enable=$wmf_bss_enable
	nvram set "$iface"_wps_config_state=$wps
	nvram set "$iface"_wps_mode=$wps_mode
	nvram set "$iface"_network=$network
}

configure_vif() {
	local vif="$1"
	local device iface mbssmac mbssnum
	config_get device "$vif" device

	[ "$2" == "$device" ] || continue

	if [ $_VIFNUM -eq 0 ]; then
		iface="$device"
	else
		iface="$device"."$_VIFNUM"
	fi

	vif_settings $vif $iface

	_VIFNUM=$((_VIFNUM+1))
}

wdev_static_settings() {
	local device=$1

	nvram set "$device"_3gpplist=""
	nvram set "$device"_4framegas=0
	nvram set "$device"_acs_chan_dwell_time=70
	nvram set "$device"_acs_chan_flop_period=70
	nvram set "$device"_acs_ci_scan_timeout=0
	nvram set "$device"_acs_ci_scan_timer=4
	#nvram set "$device"_acs_cs_scan_timer=$((scantimer * 60))
	#nvram set "$device"_acs_dfs=$acs_dfs
	nvram set "$device"_acs_dfsr_activity="30 10240"
	nvram set "$device"_acs_dfsr_deferred="604800 5"
	nvram set "$device"_acs_dfsr_immediate="300 3"
	nvram set "$device"_acs_excl_chans=""
	nvram set "$device"_acs_fcs_mode=1
	nvram set "$device"_acs_scan_entry_expire=3600
	nvram set "$device"_acs_tx_idle_cnt=5
	nvram set "$device"_ampdu=auto
	nvram set "$device"_ampdu_rr_rtylimit_tid="2 2 2 2 2 2 2 2"
	nvram set "$device"_ampdu_rtylimit_tid="5 5 5 5 5 5 5 5"
	nvram set "$device"_amsdu=auto
	nvram set "$device"_anonai=anonymous.com
	nvram set "$device"_antdiv=-1
	nvram set "$device"_apsta=1
	nvram set "$device"_assoc_retry_max=3
	nvram set "$device"_atf=0
	#nvram set "$device"_bcn=$bcn
	nvram set "$device"_bcn_rotate=1
	nvram set "$device"_bsd_helper=192.168.1.2
	nvram set "$device"_bsd_hport=9877
	nvram set "$device"_bsd_pport=9878
	nvram set "$device"_bsd_primary=192.168.1.1
	nvram set "$device"_bsd_role=0
	nvram set "$device"_bss_hs2_enabled=1
	nvram set "$device"_bss_opmode_cap_reqd=0
	nvram set "$device"_bw_cap=7
	nvram set "$device"_channel=0
	nvram set "$device"_chanspec=0
	nvram set "$device"_concaplist="1:0:0;6:20:1;6:22:0;6:80:1;6:443:1;6:1723:0;6:5060:0;17:500:1;17:5060:0;17:4500:1;50:0:1"
	nvram set "$device"_conn_cap=1
	nvram set "$device"_conn_id=1
	nvram set "$device"_corerev=49
	#nvram set "$device"_country_code=$country
	nvram set "$device"_country_rev=0
	nvram set "$device"_dcs_csa_unicast=0
	nvram set "$device"_dfs_postism=-1
	nvram set "$device"_dfs_pref=
	nvram set "$device"_dfs_preism=-1
	nvram set "$device"_dgaf_disable=0
	nvram set "$device"_domain_list=wifi.org
	nvram set "$device"_domainlist=
	#nvram set "$device"_dtim=$dtim
	nvram set "$device"_ebos_enable=0
	#nvram set "$device"_frag=$frag
	#nvram set "$device"_frameburst=$frameburst
	nvram set "$device"_gas_cb_delay=0
	nvram set "$device"_gascbdel=0
	nvram set "$device"_gmode=1
	nvram set "$device"_gmode_protection=auto
	nvram set "$device"_hessid=50:6F:9A:00:11:22
	nvram set "$device"_homeqlist="mail.example.com:rfc4282"
	nvram set "$device"_hs2cap=0
	nvram set "$device"_hs_reset=0
	nvram set "$device"_hsflag=1aa0
	nvram set "$device"_hw_rxchain=7
	nvram set "$device"_hw_txchain=7
	nvram set "$device"_icmpv4_echo=1
	nvram set "$device"_infra=1
	#nvram set "$device"_interface="$device"
	nvram set "$device"_interworking=1
	nvram set "$device"_intfer_cnt=3
	nvram set "$device"_intfer_period=1
	nvram set "$device"_intfer_tcptxfail=5
	nvram set "$device"_intfer_txfail=16
	nvram set "$device"_ip_add_type_avail=1
	nvram set "$device"_ipv4addr=3
	nvram set "$device"_ipv6addr=0
	nvram set "$device"_iwnettype=2
	nvram set "$device"_l2_traffic_inspect=1
	nvram set "$device"_lazywds=0
	nvram set "$device"_leddc=0x640000
	#nvram set "$device"_maxassoc=$maxassoc
	nvram set "$device"_mcast_regen_bss_enable=1
	nvram set "$device"_mrate=0
	nvram set "$device"_nai_realm_list=1
	#nvram set "$device"_nband=$nband
	nvram set "$device"_net_auth_type=1
	nvram set "$device"_netauthlist="accepttc=+httpred=https://tandc-server.wi-fi.org"
	nvram set "$device"_nmcsidx=-1
	nvram set "$device"_nmode=-1
	nvram set "$device"_nmode_protection=auto
	nvram set "$device"_obss_coex=1
	nvram set "$device"_oper_name=1
	nvram set "$device"_opercls=3
	nvram set "$device"_oplist="Wi-Fi Alliance!"
	nvram set "$device"_osu_frndname="SP Red Test Only"
	nvram set "$device"_osu_icons=icon_red_zxx.png+icon_red_eng.png
	nvram set "$device"_osu_method=1
	nvram set "$device"_osu_nai=
	nvram set "$device"_osu_servdesc="Free service for test purpose!"
	nvram set "$device"_osu_ssid=OSU
	nvram set "$device"_osu_uri="https://osu-server.r2-testbed.wi-fi.org/"
	nvram set "$device"_osuicon_id=1
	nvram set "$device"_ouilist=506F9A:1;001BC504BD:1
	nvram set "$device"_phytype=v
	nvram set "$device"_phytypes=v
	nvram set "$device"_plcphdr=long
	nvram set "$device"_plmn_mcc=0
	nvram set "$device"_plmn_mnc=0
	nvram set "$device"_probresp_mf=0
	nvram set "$device"_probresp_sw=1
	nvram set "$device"_proxy_arp=1
	nvram set "$device"_pspretend_retry_limit=0
	nvram set "$device"_pspretend_threshold=0
	nvram set "$device"_psr_mrpt=0
	nvram set "$device"_qosmapie="35021606+8,15;0,7;255,255;16,31;32,39;255,255;40,47;255,255"
	nvram set "$device"_radio_pwrsave_enable=0
	nvram set "$device"_radio_pwrsave_level=0
	nvram set "$device"_radio_pwrsave_pps=10
	nvram set "$device"_radio_pwrsave_quiet_time=1800
	nvram set "$device"_radio_pwrsave_stas_assoc_check=0
	nvram set "$device"_radioids=BCM72
	nvram set "$device"_rate=0
	nvram set "$device"_rateset=default
	nvram set "$device"_realmlist="mail.example.com"
	nvram set "$device"_reg_mode=off
	nvram set "$device"_rifs_advert=auto
	#nvram set "$device"_rts=$rts
	nvram set "$device"_rxchain=3
	nvram set "$device"_rxchain_pwrsave_stas_assoc_check=0
	#nvram set "$device"_rxchain_pwrsave_enable=$rxchain_pwrsave_enable
	#nvram set "$device"_rxchain_pwrsave_pps=$rxchain_pwrsave_pps
	#nvram set "$device"_rxchain_pwrsave_quiet_time=$rxchain_pwrsave_quiet_time
	nvram set "$device"_rxstreams=0
	nvram set "$device"_ssd_type=0
	nvram set "$device"_sta_retry_time=5
	nvram set "$device"_stbc_rx=0
	nvram set "$device"_stbc_tx=auto
	nvram set "$device"_taf_enable=0
	nvram set "$device"_tpc_db=0
	#nvram set "$device"_txbf_bfe_cap=$beamforming
	#nvram set "$device"_txbf_bfr_cap=$beamforming
	nvram set "$device"_txbf_imp=1
	nvram set "$device"_txchain=3
	nvram set "$device"_txstreams=0
	nvram set "$device"_unit=0
	nvram set "$device"_venue_name=1
	nvram set "$device"_venuegrp=2
	nvram set "$device"_venuelist="0123456789ABCDEF"
	nvram set "$device"_venuetype=8
	nvram set "$device"_vht_features=-1
	nvram set "$device"_vifs="$device.1 $device.2 $device.3"
	nvram set "$device"_vlan_prio_mode=off
	nvram set "$device"_wan_metrics=1
	nvram set "$device"_wanmetrics="1:0:0=2500>384=0>0=0"
	nvram set "$device"_wds=
	nvram set "$device"_wds_timeout=1
	nvram set "$device"_wdssec_enable=0
	nvram set "$device"_wet_tunnel=0
	nvram set "$device"_wl_osu_frndname=*DEl*
	nvram set "$device"_wl_osu_uri=*DEl*
	#nvram set "$device"_wme=$wme
	nvram set "$device"_wme_ap_be="15 63 3 0 0 off off"
	nvram set "$device"_wme_ap_bk="15 1023 7 0 0 off off"
	nvram set "$device"_wme_ap_vi="7 15 1 6016 3008 off off"
	nvram set "$device"_wme_ap_vo="3 7 1 3264 1504 off off"
	#nvram set "$device"_wme_apsd=$wme_apsd
	#nvram set "$device"_wme_no_ack=$wme_no_ack
	nvram set "$device"_wme_sta_be="15 1023 3 0 0 off off"
	nvram set "$device"_wme_sta_bk="15 1023 7 0 0 off off"
	nvram set "$device"_wme_sta_vi="7 15 2 6016 3008 off off"
	nvram set "$device"_wme_sta_vo="3 7 2 3264 1504 off off"
	nvram set "$device"_wme_txp_be="7 3 6 2 0"
	nvram set "$device"_wme_txp_bk="7 3 6 2 0"
	nvram set "$device"_wme_txp_vi="7 3 6 2 0"
	nvram set "$device"_wme_txp_vo="7 3 6 2 0"
	nvram set "$device"_wmf_mdata_sendup=0
	nvram set "$device"_wmf_ucast_upnp=0
	nvram set "$device"_wmf_ucigmp_query=0
	nvram set "$device"_wps_reg=enabled
}

wdev_settings() {
	local cfg=$1
	local device=$cfg
	local country band bandwidth hwmode channel scantimer
	local wme wme_no_ack wme_apsd frag rts dtim bcn frameburst
	local rifs rifs_advert maxassoc reg_mode acs_dfs beamforming
	local rxchain_pwrsave_enable rxchain_pwrsave_pps rxchain_pwrsave_quiet_time


	config_get country $cfg country "EU/13"
	config_get band $cfg band "b"
	config_get bandwidth $cfg bandwidth "80"
	config_get hwmode $cfg hwmode "11ac"
	config_get channel $cfg channel "auto"
	config_get scantimer $cfg scantimer "0"
	config_get wme $cfg wmm "on"
	config_get wme_no_ack $cfg wmm_noack "off"
	config_get wme_apsd $cfg wmm_apsd "off"
	config_get frag $cfg fragthresh "2346"
	config_get rts $cfg rtsthresh "2347"
	config_get dtim $cfg dtim_period "1"
	config_get bcn $cfg beacon_int "100"
	config_get frameburst $cfg frameburst "off"
	config_get rifs $cfg rifs "0"
	config_get rifs_advert $cfg rifs_advert "auto"
	config_get maxassoc $cfg maxassoc "32"
	config_get reg_mode $cfg reg_mode "h"
	config_get acs_dfs $cfg dfsc "1"
	config_get beamforming $cfg beamforming "0"
	config_get rxchain_pwrsave_enable $cfg rxchainps "0"
	config_get rxchain_pwrsave_pps $cfg rxchainps_qt "10"
	config_get rxchain_pwrsave_quiet_time $cfg rxchainps_pps "10"

	if [ $band == "a" ]; then
		freq=5
		nband=1
		reg_mode=h
	else
		freq=2
		nband=2
		reg_mode=off
	fi

	acs_scan_timer=$((scantimer * 60))

	case "$channel" in
		auto)
			channel=0
			chanspec=0
		;;
		*u|*l|*/80)
			chanspec=$channel
			channel=$(echo $chanspec | awk -'F[u,l,/]' '{print$1}')
		;;
		*)
			chanspec="$channel"
			if [ "$bandwidth" == "40" ]; then
				chanspec=$(wlctl -i $device chanspecs -b $freq -w 40 | grep -w "$channel\"l\"\|$channel\"u\"")
			elif [ "$bandwidth" == "80" ]; then
				chanspec="$channel/80"
			fi
		;;
	esac

	case "$bandwidth" in
		80) bw_cap=7 ;;
		40) bw_cap=3 ;;
		*) bw_cap=1 ;;
	esac

	country_code=$(echo $country | awk -F'/' '{print$1}')
	country_rev=$(echo $country | awk -F'/' '{print$2}')

	nvram set "$device"_acs_cs_scan_timer=$acs_scan_timer
	nvram set "$device"_acs_dfs=$acs_dfs
	nvram set "$device"_bcn=$bcn
	nvram set "$device"_bw_cap=$bw_cap
	nvram set "$device"_channel=$channel
	nvram set "$device"_chanspec=$chanspec
	nvram set "$device"_country_code=$country_code
	nvram set "$device"_country_rev=${country_rev:-0}
	nvram set "$device"_dtim=$dtim
	nvram set "$device"_frag=$frag
	nvram set "$device"_frameburst=$frameburst
	nvram set "$device"_interface="$device"
	nvram set "$device"_maxassoc=$maxassoc
	nvram set "$device"_nband=$nband
	nvram set "$device"_rts=$rts
	nvram set "$device"_rxchain_pwrsave_enable=$rxchain_pwrsave_enable
	nvram set "$device"_rxchain_pwrsave_pps=$rxchain_pwrsave_pps
	nvram set "$device"_rxchain_pwrsave_quiet_time=$rxchain_pwrsave_quiet_time
	nvram set "$device"_txbf_bfe_cap=$beamforming
	nvram set "$device"_txbf_bfr_cap=$beamforming
	nvram set "$device"_vifs="$device.1 $device.2 $device.3"
	nvram set "$device"_wme=$wme
	nvram set "$device"_wme_apsd=$wme_apsd
	nvram set "$device"_wme_no_ack=$wme_no_ack
	nvram set "$device"_reg_mode=$reg_mode
}

setup_wifi_device() {
	local device="$1"
	local vif

	for vif in $device $device.1 $device.2 $device.3; do
		nvram set "$vif"_bss_enabled=0
	done

	# configure virtual wireless interfaces
	config_foreach configure_vif wifi-iface "$device"
	_VIFNUM=0

	wdev_settings $device

	_WDEVNUM=$((_WDEVNUM+1))
	#nvram commit
}

configure_wifi() {
	config_load wireless
	config_foreach setup_wifi_device wifi-device

	[ $_RELOAD -eq 0 ] && wlmngr_setupTPs

	wlmngr_stopServices

	while [ $_WIDX -le $_WDEVNUM ]; do
		wlmngr_WlConfDown $_WIDX
		wlmngr_setSsid $_WIDX
		wlmngr_wlIfcDown $_WIDX
		wlmngr_doWlConf $_WIDX
		wlmngr_setupMbssMacAddr $_WIDX

		#wlmngr_startServices # MOVED TO END
		#wlmngr_startWsc # MOVED TO END

		#wlmngr_WlConfStart $_WIDX
		wlmngr_wlIfcUp $_WIDX
		wlmngr_doQoS $_WIDX
		wlmngr_finalize $_WIDX

		_WIDX=$((_WIDX+1))
	done

	map_networks

	wlmngr_startServices
	wlmngr_startWsc
}

case "$_ACTION" in
	detect) wifi_detect; exit ;;
	down) _DOWN=1; wlmngr_WlConfDown 0; wlmngr_WlConfDown 1; exit ;;
	reload*) _RELOAD=1 ;;
esac

configure_wifi
ubus call network reload

